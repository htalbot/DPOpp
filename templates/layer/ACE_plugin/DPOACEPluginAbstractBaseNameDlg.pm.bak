# generated by wxGlade 0.6.8 on Thu Sep 17 08:21:24 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOACEPluginAbstractBaseNameDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $cpp_abstract_classes_ref, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOACEPluginAbstractBaseNameDlg::new
    $style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{list_ctrl_ace_plugin_interfaces} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxSUNKEN_BORDER);
    $self->{button_ok} = Wx::Button->new($self, wxID_ANY, _T("Ok"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_CANCEL, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_LIST_ITEM_ACTIVATED($self, $self->{list_ctrl_ace_plugin_interfaces}->GetId, \&on_list_ctrl_ace_plugin_interfaces);
    Wx::Event::EVT_BUTTON($self, $self->{button_ok}->GetId, \&on_button_ok);
    Wx::Event::EVT_BUTTON($self, wxID_CANCEL, \&on_button_cancel);

    # end wxGlade

    $self->{cpp_abstract_classes_ref} = $cpp_abstract_classes_ref;

    $self->create_and_fill_list_ctrl();

    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOACEPluginAbstractBaseNameDlg::__set_properties
    $self->SetTitle(_T("Plugin abstract base name"));
    $self->{list_ctrl_ace_plugin_interfaces}->SetMinSize(Wx::Size->new(300, 450));
    # end wxGlade

    $self->{list_ctrl_ace_plugin_interfaces}->SetMinSize(Wx::Size->new(300, 450));
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOACEPluginAbstractBaseNameDlg::__do_layout
    $self->{sizer_10} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_14} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_13} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_13}->Add($self->{list_ctrl_ace_plugin_interfaces}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_10}->Add($self->{sizer_13}, 1, wxEXPAND, 0);
    $self->{sizer_14}->Add($self->{button_ok}, 0, wxALL, 5);
    $self->{sizer_14}->Add($self->{button_cancel}, 0, wxALL, 5);
    $self->{sizer_10}->Add($self->{sizer_14}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->SetSizer($self->{sizer_10});
    $self->{sizer_10}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub create_and_fill_list_ctrl
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Abstract interfaces");
    $col->SetWidth(130);
    $self->{list_ctrl_ace_plugin_interfaces}->InsertColumn(0, $col);

    my $i = 0;
    foreach my $abstract_class (@{$self->{cpp_abstract_classes_ref}})
    {
        my $item = Wx::ListItem->new();

        $item->SetId($i);
        $item->SetText($abstract_class);
        $self->{list_ctrl_ace_plugin_interfaces}->InsertItem( $item );

        $i++;
    }
}

sub set_selection
{
    my ($self) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_ace_plugin_interfaces}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        $self->{selection} = $self->{list_ctrl_ace_plugin_interfaces}->GetItemText($i);
    }

    if ($self->{selection} eq "")
    {
        return 0;
    }

    return 1;
}


#Eeeeeeeeeeeeeeevent handlers
sub on_button_ok
{
    my ($self, $event) = @_;

    if ($self->set_selection())
    {
        $self->EndModal(Wx::wxID_OK);
    }
    else
    {
        Wx::MessageBox("No selection");
    }

    return;

    # wxGlade: DPOACEPluginAbstractBaseNameDlg::on_button_ok <event_handler>
    warn "Event handler (on_button_ok) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOACEPluginAbstractBaseNameDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}



sub on_list_ctrl_ace_plugin_interfaces
{
    my ($self, $event) = @_;


    return;

    # wxGlade: DPOACEPluginAbstractBaseNameDlg::on_list_ctrl_ace_plugin_interfaces <event_handler>
    warn "Event handler (on_list_ctrl_ace_plugin_interfaces) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPOACEPluginAbstractBaseNameDlg

1;

