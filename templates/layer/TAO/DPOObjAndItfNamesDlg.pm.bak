# generated by wxGlade 0.6.8 on Fri Sep 25 13:05:10 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
use Wx::Locale gettext => '_T';
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOObjAndItfNamesDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOObjAndItfNamesDlg::new
    $style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{radio_box_choice} = Wx::RadioBox->new($self, wxID_ANY, _T("Implementation/Client/Server"), wxDefaultPosition, wxDefaultSize, [_T("No selection"), _T("Implement a Corba interface"), _T("Use a Corba object (client)"), _T("Activate a Corba object (server)")], 0, wxRA_SPECIFY_ROWS);
    $self->{label_interface} = Wx::StaticText->new($self, wxID_ANY, _T("Interface:"), wxDefaultPosition, wxDefaultSize, );
    $self->{combo_box_interfaces} = Wx::ComboBox->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, [], wxCB_DROPDOWN);
    $self->{label_info} = Wx::StaticText->new($self, wxID_ANY, _T("(If you don't find the desired interface in the combobox,\nmake sure that *_ROOT env. var. is defined for the \nexpected interface.)"), wxDefaultPosition, wxDefaultSize, );
    $self->{label_object_file} = Wx::StaticText->new($self, wxID_ANY, _T("Implementation class name:"), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_object_file} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{label_host_file} = Wx::StaticText->new($self, wxID_ANY, _T("Project hosting object:"), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_host_file} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{button_ok} = Wx::Button->new($self, wxID_ANY, _T("Ok"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_CANCEL, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_RADIOBOX($self, $self->{radio_box_choice}->GetId, \&on_radio_click);
    Wx::Event::EVT_BUTTON($self, $self->{button_ok}->GetId, \&on_ok);
    Wx::Event::EVT_BUTTON($self, wxID_CANCEL, \&on_cancel);

    # end wxGlade

    $self->{target} = "";

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOObjAndItfNamesDlg::__set_properties
    $self->SetTitle(_T("Object and interface names"));
    $self->{radio_box_choice}->SetSelection(0);
    $self->{label_interface}->Enable(0);
    $self->{combo_box_interfaces}->SetSelection(-1);
    $self->{label_info}->SetMinSize(Wx::Size->new(280,50));
    $self->{label_object_file}->Enable(0);
    $self->{text_ctrl_object_file}->Enable(0);
    $self->{label_host_file}->Enable(0);
    $self->{text_ctrl_host_file}->Enable(0);
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOObjAndItfNamesDlg::__do_layout
    $self->{sizer_9} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_11} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_18} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_21} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_19} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_interface} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_18}->Add($self->{radio_box_choice}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_interface}->Add($self->{label_interface}, 0, 0, 0);
    $self->{sizer_interface}->Add($self->{combo_box_interfaces}, 1, 0, 0);
    $self->{sizer_18}->Add($self->{sizer_interface}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_18}->Add($self->{label_info}, 0, wxALL|wxEXPAND, 5);
    $self->{sizer_19}->Add($self->{label_object_file}, 0, 0, 0);
    $self->{sizer_19}->Add($self->{text_ctrl_object_file}, 1, 0, 0);
    $self->{sizer_18}->Add($self->{sizer_19}, 0, wxALL|wxEXPAND, 5);
    $self->{sizer_21}->Add($self->{label_host_file}, 0, 0, 0);
    $self->{sizer_21}->Add($self->{text_ctrl_host_file}, 1, 0, 0);
    $self->{sizer_18}->Add($self->{sizer_21}, 0, wxALL|wxEXPAND, 5);
    $self->{sizer_9}->Add($self->{sizer_18}, 0, wxALL|wxEXPAND, 5);
    $self->{sizer_11}->Add($self->{button_ok}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_11}->Add($self->{button_cancel}, 0, wxALL, 5);
    $self->{sizer_9}->Add($self->{sizer_11}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->SetSizer($self->{sizer_9});
    $self->{sizer_9}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub set_project_name
{
    my ($self, $project_name) = @_;

    $self->{project_name} = $project_name;
}

sub fill_TAO_interfaces
{
    my ($self, $available_tao_interfaces) = @_;

    foreach my $path (@{$available_tao_interfaces})
    {
        $path =~ s/\\/\//g;
        my ($itf) = $path =~ /.*\/(.*)$/;
        $self->{combo_box_interfaces}->Append($itf);
    }
}


#### Eeeeeeeeeeeeeeevent handlers
sub on_radio_click
{
    my ($self, $event) = @_;

    $self->{label_interface}->Enable(0);
    $self->{combo_box_interfaces}->Enable(0);
    $self->{label_object_file}->Enable(0);
    $self->{text_ctrl_object_file}->Enable(0);
    $self->{label_host_file}->Enable(0);
    $self->{text_ctrl_host_file}->Enable(0);

    my $selection = $self->{radio_box_choice}->GetStringSelection();
    if ($selection eq "Implement a Corba interface")
    {
        $self->{label_interface}->Enable(1);
        $self->{combo_box_interfaces}->Enable(1);
        $self->{label_info}->Enable(1);

        $self->{label_object_file}->Enable(1);
        $self->{text_ctrl_object_file}->Enable(1);
        $self->{text_ctrl_host_file}->SetValue($self->{project_name});

        $self->{target} = "Implementation";
    }

    if ($selection eq "Use a Corba object (client)")
    {
        $self->{label_interface}->Enable(1);
        $self->{combo_box_interfaces}->Enable(1);
        $self->{label_info}->Enable(1);

        $self->{target} = "Client";
    }

    if ($selection eq "Activate a Corba object (server)")
    {
        $self->{label_interface}->Enable(1);
        $self->{combo_box_interfaces}->Enable(1);
        $self->{label_info}->Enable(1);

        $self->{label_host_file}->Enable(1);
        $self->{text_ctrl_host_file}->Enable(1);

        $self->{label_object_file}->Enable(1);
        $self->{text_ctrl_object_file}->Enable(1);

        $self->{target} = "Server";
    }

    return;

    # wxGlade: DPOObjAndItfNamesDlg::on_radio_click <event_handler>
    warn "Event handler (on_radio_click) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_ok
{
    my ($self, $event) = @_;

    if (!$self->{target})
    {
        Wx::MessageBox(
                "You must select an option.",
                "Implementation/Client/Server",
                Wx::wxOK | Wx::wxICON_ERROR);

        $event->Skip;
        return;
    }

    if ($self->{target} eq "Implementation")
    {
        if (!$self->{combo_box_interfaces}->GetValue()
            || !$self->{text_ctrl_object_file}->GetValue())
        {
            Wx::MessageBox(
                    "You must select an interface and an object file.",
                    "Implementation",
                    Wx::wxOK | Wx::wxICON_ERROR);

            $event->Skip;
            return;
        }
    }

    if ($self->{target} eq "Client")
    {
        if (!$self->{combo_box_interfaces}->GetValue())
        {
            Wx::MessageBox(
                    "You must select an interface.",
                    "Client",
                    Wx::wxOK | Wx::wxICON_ERROR);

            $event->Skip;
            return;
        }
    }

    if ($self->{target} eq "Server")
    {
        if (!$self->{combo_box_interfaces}->GetValue()
            || !$self->{text_ctrl_object_file}->GetValue()
            || !$self->{text_ctrl_host_file}->GetValue())
        {
            Wx::MessageBox(
                    "You must select an object file and a host file.",
                    "Client",
                    Wx::wxOK | Wx::wxICON_ERROR);

            $event->Skip;
            return;
        }
    }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOObjAndItfNamesDlg::on_ok <event_handler>
    warn "Event handler (on_ok) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOObjAndItfNamesDlg::on_cancel <event_handler>
    warn "Event handler (on_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class DPOObjAndItfNamesDlg

1;

