use lib $ENV{DPO2_CORE_ROOT} . "/scripts";

# generated by wxGlade 0.6.8 on Thu Oct 22 12:23:59 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use List::MoreUtils;
use DPOUtils;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOReplaceMPBDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $mpb_files_to_ask_to_replace, $predefined_mpb_dir, $mpc_path, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOReplaceMPBDlg::new
    $style = wxDEFAULT_DIALOG_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{text_ctrl_note} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{sizer_note_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Note") );
    $self->{splitter_main} = Wx::SplitterWindow->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
    $self->{splitter_main_pane_list_ctrl} = Wx::Panel->new($self->{splitter_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{list_ctrl_mpbs} = Wx::ListCtrl->new($self->{splitter_main_pane_list_ctrl}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{splitter_main_pane_mpbs} = Wx::Panel->new($self->{splitter_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_existing_mpb} = Wx::TextCtrl->new($self->{splitter_main_pane_mpbs}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{sizer_existing_staticbox} = Wx::StaticBox->new($self->{splitter_main_pane_mpbs}, wxID_ANY, _T("Existing MPB") );
    $self->{button_diff} = Wx::Button->new($self->{splitter_main_pane_mpbs}, wxID_ANY, _T("Show diff"));
    $self->{text_ctrl_new_mpb} = Wx::TextCtrl->new($self->{splitter_main_pane_mpbs}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{sizer_new_staticbox} = Wx::StaticBox->new($self->{splitter_main_pane_mpbs}, wxID_ANY, _T("New MPB") );
    $self->{button_to_replace} = Wx::Button->new($self, wxID_ANY, _T("To replace"));
    $self->{button_not_to_replace} = Wx::Button->new($self, wxID_ANY, _T("Not to replace"));
    $self->{button_apply_replacement} = Wx::Button->new($self, wxID_ANY, _T("Apply replacement"));
    $self->{button_return} = Wx::Button->new($self, wxID_ANY, _T("Don't replace"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_LIST_ITEM_DESELECTED($self, $self->{list_ctrl_mpbs}->GetId, \&on_list_ctrl_mpbs_deselected);
    Wx::Event::EVT_LIST_ITEM_SELECTED($self, $self->{list_ctrl_mpbs}->GetId, \&on_list_ctrl_mpbs_selected);
    Wx::Event::EVT_BUTTON($self, $self->{button_diff}->GetId, \&on_button_diff);
    Wx::Event::EVT_BUTTON($self, $self->{button_to_replace}->GetId, \&on_button_to_replace);
    Wx::Event::EVT_BUTTON($self, $self->{button_not_to_replace}->GetId, \&on_button_not_to_replace);
    Wx::Event::EVT_BUTTON($self, $self->{button_apply_replacement}->GetId, \&on_button_apply_replacement);
    Wx::Event::EVT_BUTTON($self, $self->{button_return}->GetId, \&on_button_return);

    # end wxGlade

    $self->{mpb_files_to_ask_to_replace} = $mpb_files_to_ask_to_replace;
    $self->{predefined_mpb_dir} = $predefined_mpb_dir;
    $self->{mpc_path} = $mpc_path;
    $self->{files_to_copy} = [];
    $self->{mpbs_to_replace} = [];

    $self->{initial_sizer_existing_staticbox_label} = $self->{sizer_existing_staticbox}->GetLabel();
    $self->{initial_sizer_new_label} = $self->{sizer_new_staticbox}->GetLabel();

    $self->{text_ctrl_note}->SetValue("Some MPBs have already been set in $mpc_path.\n"
                                        . "You have to decide to replace them or not with the template mpb file");

    $self->create_list_ctrl();

    $self->{button_to_replace}->Enable(0);
    $self->{button_not_to_replace}->Enable(0);
    $self->{button_apply_replacement}->Enable(0);

    return $self;

}

sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOReplaceMPBDlg::__set_properties
    $self->SetTitle(_T("Replace MPB ?"));
    $self->SetSize(Wx::Size->new(800, 600));
    $self->{text_ctrl_note}->SetMinSize(Wx::Size->new(592, 63));
    $self->{text_ctrl_note}->SetBackgroundColour(Wx::Colour->new(192, 192, 192));
    $self->{list_ctrl_mpbs}->SetMinSize(Wx::Size->new(150, 430));
    $self->{button_to_replace}->SetToolTipString(_T("Replace existing MPB with new one for selected items."));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOReplaceMPBDlg::__do_layout
    $self->{sizer_main} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_actions} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_list_files} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_mpbs} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_files} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_new_staticbox}->Lower();
    $self->{sizer_new} = Wx::StaticBoxSizer->new($self->{sizer_new_staticbox}, wxVERTICAL);
    $self->{sizer_existing_staticbox}->Lower();
    $self->{sizer_existing} = Wx::StaticBoxSizer->new($self->{sizer_existing_staticbox}, wxVERTICAL);
    $self->{sizer_list_ctrl} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_note_staticbox}->Lower();
    $self->{sizer_note} = Wx::StaticBoxSizer->new($self->{sizer_note_staticbox}, wxHORIZONTAL);
    $self->{sizer_note}->Add($self->{text_ctrl_note}, 0, wxALL, 5);
    $self->{sizer_main}->Add($self->{sizer_note}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_list_ctrl}->Add($self->{list_ctrl_mpbs}, 1, wxALL|wxEXPAND, 5);
    $self->{splitter_main_pane_list_ctrl}->SetSizer($self->{sizer_list_ctrl});
    $self->{sizer_existing}->Add($self->{text_ctrl_existing_mpb}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_files}->Add($self->{sizer_existing}, 1, wxLEFT|wxRIGHT|wxEXPAND, 5);
    $self->{sizer_files}->Add($self->{button_diff}, 0, wxALIGN_CENTER_HORIZONTAL, 3);
    $self->{sizer_new}->Add($self->{text_ctrl_new_mpb}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_files}->Add($self->{sizer_new}, 1, wxLEFT|wxRIGHT|wxEXPAND, 5);
    $self->{sizer_mpbs}->Add($self->{sizer_files}, 2, wxEXPAND, 0);
    $self->{splitter_main_pane_mpbs}->SetSizer($self->{sizer_mpbs});
    $self->{splitter_main}->SplitVertically($self->{splitter_main_pane_list_ctrl}, $self->{splitter_main_pane_mpbs}, );
    $self->{sizer_list_files}->Add($self->{splitter_main}, 1, wxEXPAND, 0);
    $self->{sizer_main}->Add($self->{sizer_list_files}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_actions}->Add($self->{button_to_replace}, 0, wxALL, 5);
    $self->{sizer_actions}->Add($self->{button_not_to_replace}, 0, wxALL, 5);
    $self->{sizer_actions}->Add($self->{button_apply_replacement}, 0, wxALL, 5);
    $self->{sizer_actions}->Add($self->{button_return}, 0, wxALL, 5);
    $self->{sizer_main}->Add($self->{sizer_actions}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->SetSizer($self->{sizer_main});
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrl
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("MPB");
    $col->SetWidth(130);
    $self->{list_ctrl_mpbs}->InsertColumn(0, $col);

    my $i = 0;
    foreach my $mpb_name (@{$self->{mpb_files_to_ask_to_replace}})
    {
        my $item = Wx::ListItem->new();

        $item->SetId($i);
        $item->SetText($mpb_name);
        $self->{list_ctrl_mpbs}->InsertItem( $item );
    }
}

sub load_files
{
    my ($self, $mpb_name) = @_;

    if (!$self->{text_ctrl_existing_mpb}->LoadFile("$self->{mpc_path}/$mpb_name"))
    {
        Wx::MessageBox("Failed load file $self->{mpc_path}/$mpb_name", "", Wx::wxOK | Wx::wxICON_ERROR);
    }

    if (!$self->{text_ctrl_new_mpb}->LoadFile("$self->{predefined_mpb_dir}/$mpb_name"))
    {
        Wx::MessageBox("Failed load file $self->{predefined_mpb_dir}/$mpb_name", "", Wx::wxOK | Wx::wxICON_ERROR);
    }
}

sub enable_apply_button
{
    my ($self) = @_;

    if (scalar(@{$self->{mpbs_to_replace}}) != 0)
    {
        $self->{button_apply_replacement}->Enable(1);
    }
    else
    {
        $self->{button_apply_replacement}->Enable(0);
    }
}

###EEEEEEEEvent handlers
sub on_button_to_replace
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_mpbs}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $mpb_name = $self->{list_ctrl_mpbs}->GetItemText($i);

        if (!List::MoreUtils::any {$_ eq $mpb_name} @{$self->{mpbs_to_replace}})
        {
            push(@{$self->{mpbs_to_replace}}, $mpb_name);
        }

        $self->{list_ctrl_mpbs}->SetItemState($i, 0, wxLIST_STATE_SELECTED);
        $self->{list_ctrl_mpbs}->SetItemBackgroundColour($i, Wx::Colour->new(0, 255, 0));
    }

    $self->enable_apply_button();

    return;

    # wxGlade: DPOReplaceMPBDlg::on_button_to_replace <event_handler>
    warn "Event handler (on_button_to_replace) not implemented";
    $event->Skip;
    # end wxGlade
}

sub on_button_not_to_replace
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_mpbs}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $mpb_name = $self->{list_ctrl_mpbs}->GetItemText($i);

        @{$self->{mpbs_to_replace}} = grep { $_ ne $mpb_name } @{$self->{mpbs_to_replace}};

        $self->{list_ctrl_mpbs}->SetItemState($i, 0, wxLIST_STATE_SELECTED);
        $self->{list_ctrl_mpbs}->SetItemBackgroundColour($i, Wx::Colour->new(255, 255, 255));
    }

    $self->enable_apply_button();

    return;

    # wxGlade: DPOReplaceMPBDlg::on_button_not_to_replace <event_handler>
    warn "Event handler (on_button_not_to_replace) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_apply_replacement
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_mpbs}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_DONTCARE);
        if ( $i == -1 )
        {
            last;
        }

        if ($self->{list_ctrl_mpbs}->GetItemBackgroundColour($i) == Wx::Colour->new(0, 255, 0))
        {
            my $mpb_name = $self->{list_ctrl_mpbs}->GetItemText($i);
            push(@{$self->{files_to_copy}}, $mpb_name);
        }
    }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOReplaceMPBDlg::on_button_apply_replacement <event_handler>
    warn "Event handler (on_button_apply_replacement) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_return
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOReplaceMPBDlg::on_button_return <event_handler>
    warn "Event handler (on_button_return) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_list_ctrl_mpbs_selected
{
    my ($self, $event) = @_;

    if ($self->{list_ctrl_mpbs}->GetSelectedItemCount() > 1)
    {
        $self->{text_ctrl_existing_mpb}->SetValue("");
        $self->{text_ctrl_new_mpb}->SetValue("");
        return;
    }

    my $mpb_name = $event->GetText();

    $self->load_files($mpb_name);

    $self->{sizer_existing_staticbox}->SetLabel("$self->{initial_sizer_existing_staticbox_label}: $self->{mpc_path}");
    $self->{sizer_new_staticbox}->SetLabel("$self->{initial_sizer_new_label}: $self->{predefined_mpb_dir}");
    $self->{button_to_replace}->Enable(1);
    $self->{button_not_to_replace}->Enable(1);

    return;

    # wxGlade: DPOReplaceMPBDlg::on_list_ctrl_mpbs_selected <event_handler>
    warn "Event handler (on_list_ctrl_mpbs_selected) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_list_ctrl_mpbs_deselected
{
    my ($self, $event) = @_;

    if ($self->{list_ctrl_mpbs}->GetSelectedItemCount() == 0)
    {
        $self->{text_ctrl_existing_mpb}->SetValue("");
        $self->{text_ctrl_new_mpb}->SetValue("");
    }

    if ($self->{list_ctrl_mpbs}->GetSelectedItemCount() == 1)
    {
        my $i = -1;
        for ( ;; )
        {
            $i = $self->{list_ctrl_mpbs}->GetNextItem($i,
                                        Wx::wxLIST_NEXT_ALL,
                                        Wx::wxLIST_STATE_SELECTED);
            if ( $i == -1 )
            {
                last;
            }

            my $mpb_name = $self->{list_ctrl_mpbs}->GetItemText($i);

            $self->load_files($mpb_name);
        }
    }

    $self->{button_to_replace}->Enable(0);
    $self->{button_not_to_replace}->Enable(0);

    return;

    # wxGlade: DPOReplaceMPBDlg::on_list_ctrl_mpbs_deselected <event_handler>
    warn "Event handler (on_list_ctrl_mpbs_deselected) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_diff
{
    my ($self, $event) = @_;

    Wx::MessageBox("To do..."); # TO_DO

    return;

    # wxGlade: DPOReplaceMPBDlg::on_button_diff <event_handler>
    warn "Event handler (on_button_diff) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class DPOReplaceMPBDlg

1;

