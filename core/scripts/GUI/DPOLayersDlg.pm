use lib $ENV{DPO_CORE_ROOT} . "/scripts";

# generated by wxGlade 0.6.8 on Thu Sep 17 04:36:43 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use File::Path;
use DPOUtils;
use DPOEnvVars;

package DPOLayer;

sub new
{
    my ($class,
        $layer_id,
        $layer_path,
        $parent_layer) = @_;

    my $self =
    {
        layer_id => $layer_id,
        layer_path => $layer_path,
        parent_layer => $parent_layer
    };

    bless($self, $class);

    return $self;
};

1;


package DPOLayersDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $project_path, $panel_product, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOLayersDlg::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{list_ctrl_layers} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxSUNKEN_BORDER);
    $self->{button_import} = Wx::Button->new($self, wxID_ANY, _T("Import..."));
    $self->{button_close} = Wx::Button->new($self, wxID_ANY, _T("No more layers"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_LIST_ITEM_ACTIVATED($self, $self->{list_ctrl_layers}->GetId, \&on_list_ctrl_layers_activated);
    Wx::Event::EVT_BUTTON($self, $self->{button_import}->GetId, \&on_button_import);
    Wx::Event::EVT_BUTTON($self, $self->{button_close}->GetId, \&on_button_close);

    # end wxGlade

    $self->{project_path} = $project_path;
    $self->{panel_product} = $panel_product;
    $self->{layers} = ();

    $self->create_and_fill_list_ctrl();

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOLayersDlg::__set_properties
    $self->SetTitle(_T("Layers"));
    $self->{list_ctrl_layers}->SetMinSize(Wx::Size->new(400,400));
    # end wxGlade

    $self->{list_ctrl_layers}->SetMinSize(Wx::Size->new(400,400));
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOLayersDlg::__do_layout
    $self->{sizer_103} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_103}->Add($self->{list_ctrl_layers}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_103}->Add($self->{button_import}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_103}->Add($self->{button_close}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_103});
    $self->{sizer_103}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub create_and_fill_list_ctrl
{
    my ($self) = @_;

    # Create list_ctrl
    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Layer");
    $col->SetWidth(395);
    $self->{list_ctrl_layers}->InsertColumn(0, $col);

    # Fill it
    if ($self->available_layers())
    {
        my $i = 0;
        foreach my $key (sort keys %{$self->{layers}})
        {
            my $item = Wx::ListItem->new();

            $item->SetId($i);
            $item->SetText($key);
            $self->{list_ctrl_layers}->InsertItem($item);

            $i++;
        }
    }
    else
    {
        Wx::MessageBox("No layers available.");
    }
}

sub import_
{
    my ($self) = @_;

    my $layer_id = "";

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_layers}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        $layer_id = $self->{list_ctrl_layers}->GetItemText($i);
    }

    if ($layer_id eq "")
    {
        Wx::MessageBox("No selection", "", Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    unshift(@INC, $self->{layers}{$layer_id}->{layer_path});

    my $parent_layer_path = $self->{layers}{$layer_id}->{parent_layer};
    while ($parent_layer_path != 0)
    {
        unshift(@INC, $parent_layer_path->{layer_path});
        $parent_layer_path = $parent_layer_path->{parent_layer};
    }

    my $pm_file = "NewLayer_$layer_id";

    my $layer;
    eval {
        require("$pm_file.pm");
        $layer = $pm_file->new($self->{layers}{$layer_id}->{layer_path},
                                $self->{project_path},
                                $self->{panel_product}->{working_project},
                                $self->{panel_product});
    } or do {
        my $error = $@;
        Wx::MessageBox(
                "$error\n\n".
                "Please define '$pm_file.pm' in $self->{layers}->{$layer_id}->{layer_path}.",
                "Loading $pm_file.pm",
                Wx::wxOK | Wx::wxICON_ERROR);
        return;
    };

    @INC = grep { $_ !~ /$self->{layers}{$layer_id}->{layer_path}/ } @INC;
    $parent_layer_path = $self->{layers}{$layer_id}->{parent_layer};
    while ($parent_layer_path != 0)
    {
        @INC = grep { $_ !~ /$parent_layer_path->{layer_path}/ } @INC;
        $parent_layer_path = $parent_layer_path->{parent_layer};
    }

    if ($layer->import())
    {
        Wx::MessageBox("Layer '$layer_id' imported", "", Wx::wxOK | Wx::wxICON_INFORMATION);
    }
    else
    {
        Wx::MessageBox("Layer '$layer_id' not completely imported", "", Wx::wxOK | Wx::wxICON_WARNING);
    }
}

sub available_layers
{
    my ($self, $available_layers_ref) = @_;

    my @layer_paths;

    my $env_var_id =  "\$(DPO_TEMPLATES_ROOT)";
    my $layer_path = $env_var_id;
    if (!DPOEnvVars::expand_env_var(\$layer_path))
    {
        DPOLog::report_msg(DPOEvents::ENV_VAR_NOT_DEFINED, ["DPO_TEMPLATES_ROOT"]);
        return 0;
    }

    $layer_path .= "/layer"; # Default DPO layers

    push(@layer_paths, $layer_path);

    # Private projects layers
    my $dpo_private_dir = "\$(DPO_PRIVATE_TEMPLATES_ROOT)";
    if (DPOEnvVars::expand_env_var(\$dpo_private_dir))
    {
        my @tokens = split(/;/, $dpo_private_dir);
        foreach my $tok (@tokens)
        {
            $tok .= "/layer";
            if (-d $tok)
            {
                push(@layer_paths, $tok);
            }
        }
    }
    else
    {
        print "Available templates: no private templates defined.\n";
        # Don't return.
    }

    foreach my $layer_path (@layer_paths)
    {
        my @content;
        if (DPOUtils::get_dir_content($layer_path, \@content))
        {
            foreach my $elem (@content)
            {
                my $complete = "$layer_path/$elem";
                if (-d $complete)
                {
                    # $complete should be a directory. If not, it is
                    # not a directory containing layer.
                    if (!$self->get_layer($complete, 0))
                    {
                        DPOLog::report_msg(DPOEvents::GENERIC_ERROR, ["Can't get layer from $complete"]);
                    }
                }
            }
        }
    }

    return 1;
}

sub get_layer
{
    my ($self, $layer_path, $parent_layer) = @_;

    my $layer_in_this_layer_path = 0;

    my @new_layer_file_candidates;
    if (DPOUtils::get_dir_content($layer_path, \@new_layer_file_candidates))
    {
        foreach my $elem (@new_layer_file_candidates)
        {
            my $complete = "$layer_path/$elem";

            if (-f $complete)
            {
                if ($elem =~ /NewLayer_(.*)\.pm/)
                {
                    my $layer_file = "$layer_path/$elem";
                    my @lines;
                    if (DPOUtils::get_file_lines($layer_file, \@lines))
                    {
                        foreach my $line (@lines)
                        {
                            $line =~ s/\s*//g;
                            if ($line =~ /LayerID=(.*)/)
                            {
                                my $id = $1;
                                my $new_dir = "$layer_path";
                                $new_dir =~ s/\\/\//g;
                                my $dpo_layer = DPOLayer->new($id, $new_dir, $parent_layer);
                                $self->{layers}->{$id} = $dpo_layer;
                                $layer_in_this_layer_path = $dpo_layer;
                                last;
                            }
                        }
                    }
                }
            }
        }

        foreach my $elem (@new_layer_file_candidates)
        {
            my $complete = "$layer_path/$elem";

            if (-d $complete)
            {
                if (!$self->get_layer($complete, $layer_in_this_layer_path))
                {
                    return 0;
                }
            }
        }
    }
    else
    {
        DPOLog::report_msg(DPOEvents::GET_DIR_CONTENT_FAILURE, [$layer_path]);
        return 0;
    }

    return 1;
}


#Eeeeeeeeeeeeeeeeeeevent handlers
sub on_button_import
{
    my ($self, $event) = @_;

    $self->import_();

    return;

    # wxGlade: DPOLayersDlg::on_button_import <event_handler>
    warn "Event handler (on_button_import) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_close
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOLayersDlg::on_button_close <event_handler>
    warn "Event handler (on_button_close) not implemented";
    $event->Skip;
    # end wxGlade
}



sub on_list_ctrl_layers_activated
{
    my ($self, $event) = @_;

    $self->import_();

    return;

    # wxGlade: DPOLayersDlg::on_list_ctrl_layers_activated <event_handler>
    warn "Event handler (on_list_ctrl_layers_activated) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPOLayersDlg

1;

