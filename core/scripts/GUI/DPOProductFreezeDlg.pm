use lib $ENV{DPO_CORE_ROOT} . "/scripts";

# generated by wxGlade 0.6.8 on Tue Aug 18 12:12:04 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use DPOProduct;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOProductFreezeDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';

sub new {
    my( $self, $product, $toolchain, $workspace_projects_ref, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductFreezeDlg::new
    $style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{text_ctrl_pool_directory} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{button_browse_pool_directory} = Wx::Button->new($self, wxID_ANY, _T("..."));
    $self->{sizer_79_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Pool directory (parent)") );
    $self->{text_ctrl_target_directory} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_82_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Target directory") );
    $self->{text_ctrl_product_name} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_6_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Product name") );
    $self->{text_ctrl_product_flavour} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_70_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Flavour") );
    $self->{text_ctrl_product_version} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_16_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Version") );
    $self->{sizer_126_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Current") );
    $self->{text_ctrl_product_new_flavour} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{sizer_128_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Flavour") );
    $self->{text_ctrl_product_new_version} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{sizer_88_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Version") );
    $self->{sizer_127_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("New") );
    $self->{sizer_114_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Product") );
    $self->{list_ctrl_workspace_projects} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{sizer_81_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Workspace projects") );
    $self->{button_ok} = Wx::Button->new($self, wxID_ANY, _T("Ok"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button_browse_pool_directory}->GetId, \&on_button_browse_pool_directory);
    Wx::Event::EVT_TEXT($self, $self->{text_ctrl_product_new_flavour}->GetId, \&on_text_ctrl_product_new_flavour_text);
    Wx::Event::EVT_TEXT($self, $self->{text_ctrl_product_new_version}->GetId, \&on_text_ctrl_product_new_version_text);
    Wx::Event::EVT_BUTTON($self, $self->{button_ok}->GetId, \&on_button_ok);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{product} = $product;
    $self->{toolchain} = $toolchain;

    $self->create_list_ctrl($workspace_projects_ref);


    my $pool_dir = DPOUtils::dpo_pool_dir();
    $pool_dir .= "/$self->{toolchain}";
    $self->{text_ctrl_pool_directory}->SetValue($pool_dir);

    my $complete_target;
    $self->{target_directory} = "";
    if ($self->{product}->{freeze_directory} ne "")
    {
        $complete_target = "$pool_dir/$self->{product}->{freeze_directory}";
        $self->{text_ctrl_pool_directory}->SetValue($complete_target);

        $self->{target_directory} = "$complete_target/$product->{name}";

        $self->{button_ok}->Enable();
        $self->{text_ctrl_product_new_flavour}->Enable();
        $self->{text_ctrl_product_new_version}->Enable();
    }

    $self->{text_ctrl_product_name}->SetValue($product->{name});
    $self->{text_ctrl_product_flavour}->SetValue($product->{flavour});
    $self->{text_ctrl_product_new_flavour}->SetValue($product->{flavour});
    $self->{text_ctrl_product_new_version}->SetValue($product->{version});

    if ($self->{product}->{freeze_directory} eq "")
    {
        $self->{text_ctrl_target_directory}->SetValue($self->{target_directory});
        $self->{text_ctrl_target_directory}->SetBackgroundColour(Wx::Colour->new(255, 255, 0));
    }

    # Get the last product version
    my $last_frozen_version;
    if ($self->get_last_frozen_product_version("$self->{target_directory}/$product->{flavour}", \$last_frozen_version))
    {
        $self->{text_ctrl_product_version}->SetValue($last_frozen_version);
    }
    else
    {
        $self->{text_ctrl_product_version}->SetValue("");
    }


    $self->{flavour} = "";

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductFreezeDlg::__set_properties
    $self->SetTitle(_T("Freezing"));
    $self->SetSize(Wx::Size->new(923, 650));
    $self->{button_browse_pool_directory}->SetMinSize(Wx::Size->new(20, -1));
    $self->{text_ctrl_target_directory}->SetToolTipString(_T("Browse in pool directory (parent) to set target directory."));
    $self->{text_ctrl_product_new_flavour}->SetBackgroundColour(Wx::Colour->new(0, 255, 0));
    $self->{text_ctrl_product_new_version}->SetBackgroundColour(Wx::Colour->new(0, 255, 0));
    $self->{button_ok}->Enable(0);
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductFreezeDlg::__do_layout
    $self->{sizer_77} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_80} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_81_staticbox}->Lower();
    $self->{sizer_81} = Wx::StaticBoxSizer->new($self->{sizer_81_staticbox}, wxHORIZONTAL);
    $self->{sizer_114_staticbox}->Lower();
    $self->{sizer_114} = Wx::StaticBoxSizer->new($self->{sizer_114_staticbox}, wxVERTICAL);
    $self->{sizer_127_staticbox}->Lower();
    $self->{sizer_127} = Wx::StaticBoxSizer->new($self->{sizer_127_staticbox}, wxHORIZONTAL);
    $self->{sizer_88_staticbox}->Lower();
    $self->{sizer_88} = Wx::StaticBoxSizer->new($self->{sizer_88_staticbox}, wxHORIZONTAL);
    $self->{sizer_128_staticbox}->Lower();
    $self->{sizer_128} = Wx::StaticBoxSizer->new($self->{sizer_128_staticbox}, wxHORIZONTAL);
    $self->{sizer_126_staticbox}->Lower();
    $self->{sizer_126} = Wx::StaticBoxSizer->new($self->{sizer_126_staticbox}, wxHORIZONTAL);
    $self->{sizer_16_staticbox}->Lower();
    $self->{sizer_16} = Wx::StaticBoxSizer->new($self->{sizer_16_staticbox}, wxHORIZONTAL);
    $self->{sizer_70_staticbox}->Lower();
    $self->{sizer_70} = Wx::StaticBoxSizer->new($self->{sizer_70_staticbox}, wxHORIZONTAL);
    $self->{sizer_6_staticbox}->Lower();
    $self->{sizer_6} = Wx::StaticBoxSizer->new($self->{sizer_6_staticbox}, wxHORIZONTAL);
    $self->{sizer_82_staticbox}->Lower();
    $self->{sizer_82} = Wx::StaticBoxSizer->new($self->{sizer_82_staticbox}, wxHORIZONTAL);
    $self->{sizer_79_staticbox}->Lower();
    $self->{sizer_79} = Wx::StaticBoxSizer->new($self->{sizer_79_staticbox}, wxHORIZONTAL);
    $self->{sizer_79}->Add($self->{text_ctrl_pool_directory}, 1, 0, 0);
    $self->{sizer_79}->Add($self->{button_browse_pool_directory}, 0, wxLEFT, 3);
    $self->{sizer_77}->Add($self->{sizer_79}, 0, wxEXPAND, 0);
    $self->{sizer_82}->Add($self->{text_ctrl_target_directory}, 1, 0, 0);
    $self->{sizer_77}->Add($self->{sizer_82}, 0, wxEXPAND, 0);
    $self->{sizer_6}->Add($self->{text_ctrl_product_name}, 1, 0, 0);
    $self->{sizer_114}->Add($self->{sizer_6}, 0, wxLEFT|wxRIGHT|wxEXPAND, 30);
    $self->{sizer_70}->Add($self->{text_ctrl_product_flavour}, 1, 0, 0);
    $self->{sizer_126}->Add($self->{sizer_70}, 1, 0, 0);
    $self->{sizer_16}->Add($self->{text_ctrl_product_version}, 1, 0, 0);
    $self->{sizer_126}->Add($self->{sizer_16}, 1, 0, 0);
    $self->{sizer_114}->Add($self->{sizer_126}, 0, wxALL|wxEXPAND, 5);
    $self->{sizer_128}->Add($self->{text_ctrl_product_new_flavour}, 1, 0, 0);
    $self->{sizer_127}->Add($self->{sizer_128}, 1, 0, 0);
    $self->{sizer_88}->Add($self->{text_ctrl_product_new_version}, 1, 0, 0);
    $self->{sizer_127}->Add($self->{sizer_88}, 1, 0, 0);
    $self->{sizer_114}->Add($self->{sizer_127}, 0, wxALL|wxEXPAND, 5);
    $self->{sizer_77}->Add($self->{sizer_114}, 1, wxALL|wxEXPAND, 20);
    $self->{sizer_81}->Add($self->{list_ctrl_workspace_projects}, 1, wxEXPAND, 0);
    $self->{sizer_77}->Add($self->{sizer_81}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_80}->Add($self->{button_ok}, 0, wxALL, 5);
    $self->{sizer_80}->Add($self->{button_cancel}, 0, wxALL, 5);
    $self->{sizer_77}->Add($self->{sizer_80}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->SetSizer($self->{sizer_77});
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrl
{
    my ($self, $workspace_projects_ref) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Project");
    $col->SetWidth(130);
    $self->{list_ctrl_workspace_projects}->InsertColumn(0, $col);

    $col = Wx::ListItem->new();
    $col->SetId(1);
    $col->SetText("Version");
    $col->SetWidth(60);
    $self->{list_ctrl_workspace_projects}->InsertColumn(1, $col);

    $col = Wx::ListItem->new();
    $col->SetId(2);
    $col->SetText("Target version");
    $col->SetWidth(80);
    $self->{list_ctrl_workspace_projects}->InsertColumn(2, $col);

    foreach my $project (sort {$a->{name} cmp $b->{name}} @$workspace_projects_ref)
    {
        my $item = Wx::ListItem->new();

        my $i = $self->{list_ctrl_workspace_projects}->GetItemCount();

        $item->SetId($i);
        $item->SetText($project->{name});
        $self->{list_ctrl_workspace_projects}->InsertItem($item);
        $self->{list_ctrl_workspace_projects}->SetItem($i, 1, $project->{version});
        $self->{list_ctrl_workspace_projects}->SetItem($i, 2, $project->{target_version});

        if ($project->{version} eq $project->{target_version})
        {
            $self->{list_ctrl_workspace_projects}->SetItemBackgroundColour($i, Wx::Colour->new(192, 192, 192));
       }
    }
}

sub get_last_frozen_product_version
{
    my ($self, $product_flavour_dir, $last_frozen_version_ref) = @_;

    my $versions_log = "$product_flavour_dir/dpo_versions.log";

    my @lines;
    if (!DPOUtils::get_file_lines($versions_log, \@lines))
    {
        return 0;
    }

    my @last_block;
    foreach my $line (reverse @lines)
    {
        chomp $line;

        if ($line =~ /^$/) # not an empty line
        {
            next;
        }

        if ($line =~ /\[.*\]/)
        {
            ($$last_frozen_version_ref) = $line =~ /\[(.*)\]/;
            return 1;
        }
    }

    return 0;
}

#eeeeeeeeeeeeeevent handlers
sub on_button_browse_pool_directory
{
    my ($self, $event) = @_;

    my $dlg = Wx::DirDialog->new($self, "Select the parent directory of the new product", $self->{text_ctrl_pool_directory}->GetValue());
    my $rc = $dlg->ShowModal();
    if ($rc == Wx::wxID_OK)
    {
        my $path = $dlg->GetPath();

        if (!DPOUtils::in_dpo_pool($path))
        {
            Wx::MessageBox("$path is not in the pool.", "", Wx::wxOK | Wx::wxICON_ERROR);
            return;
        }

        $path =~ s/\\/\//g;

        $self->{text_ctrl_pool_directory}->SetValue($path);

        my $flavor = $self->{text_ctrl_product_flavour}->GetValue();
        #~ my $version = $self->{text_ctrl_product_version}->GetValue();
        $self->{target_directory} = "$path/$self->{product}->{name}";
        #~ if ($version ne "")
        #~ {
            #~ $version = "/$version";
        #~ }
        #~ $self->{text_ctrl_target_directory}->SetValue("$self->{target_directory}/$flavor$version");
        $self->{text_ctrl_target_directory}->SetValue("$self->{target_directory}/$flavor");
        $self->{text_ctrl_target_directory}->SetBackgroundColour(Wx::Colour->new(255, 255, 255));

        $self->{button_ok}->Enable();
        $self->{text_ctrl_product_flavour}->Enable();
        $self->{text_ctrl_product_new_version}->Enable();
    }

    return;


    # wxGlade: DPOProductFreezeDlg::on_button_browse_pool_directory <event_handler>
    warn "Event handler (on_button_browse_pool_directory) not implemented";
    $event->Skip;
    # end wxGlade
}



sub on_button_ok
{
    my ($self, $event) = @_;

    my $current_version = $self->{text_ctrl_product_version}->GetValue();
    my $new_version = $self->{text_ctrl_product_new_version}->GetValue();
    if ($current_version eq $new_version)
    {
        my $current_flavour = $self->{text_ctrl_product_flavour}->GetValue();
        if ($current_flavour eq $self->{text_ctrl_product_new_flavour}->GetValue())
        {
            my $msg = "You are putting stuff into an existing flavour/version of $self->{product}->{name} ($current_flavour/$current_version)\n\n" .
                        "Do you want to continue ?";
            my $rc = Wx::MessageBox(
                    $msg,
                    "Freezing",
                    Wx::wxYES_NO);
            if ($rc == Wx::wxNO)
            {
                return;
            }
       }
    }

    $self->{selections} = [];

    my $product_freeze_dir = $self->{product}->{freeze_directory};
    my $user_freeze_directory = $self->{text_ctrl_target_directory}->GetValue();

    my $rc = Wx::MessageBox(
            "Is\n\n$user_freeze_directory\n\n really the pool directory for $self->{product}->{name} ?",
            "Pool directory",
            Wx::wxYES_NO);

    if ($rc == Wx::wxNO)
    {
        return;
    }

    my $pool_dir = DPOUtils::dpo_pool_dir();
    $pool_dir .= "/$self->{toolchain}";
    my ($new_freeze_directory) = $user_freeze_directory =~ /$pool_dir\/(.*)\/$self->{product}->{name}/;

    # Assign freeze_directory to product and save it
    $self->{product}->{freeze_directory} = $new_freeze_directory;

    my $target = $self->{product}->{path};

    my $config_product = DPOProductConfig->new("$target/DPOProduct.xml");
    if ($config_product)
    {
        my $product;
        $config_product->get_product(\$product);

        $product->{freeze_directory} = $self->{product}->{freeze_directory};
        if (!$config_product->save($product))
        {
            Wx::MessageBox("Failed to update DPOProduct.xml", "", Wx::wxOK | Wx::wxICON_ERROR);
            File::Path::rmtree $target;
            return;
        }
    }
    else
    {
        Wx::MessageBox("Can't load product from $target/DPOProduct.xml", "", Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    ($self->{flavour_path}) = $user_freeze_directory;

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductFreezeDlg::on_button_ok <event_handler>
    warn "Event handler (on_button_ok) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductFreezeDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_text_ctrl_product_new_version_text
{
    my ($self, $event) = @_;

    my $new_target = "$self->{target_directory}/" . $self->{text_ctrl_product_new_version}->GetValue();
    #~ $self->{text_ctrl_target_directory}->SetValue("$self->{target_directory}/" . $self->{text_ctrl_product_flavour}->GetValue() . "/" . $self->{text_ctrl_product_new_version}->GetValue());
    $self->{text_ctrl_target_directory}->SetValue("$self->{target_directory}/" . $self->{text_ctrl_product_flavour}->GetValue());

    return;

    # wxGlade: DPOProductFreezeDlg::on_text_ctrl_product_new_version_text <event_handler>
    warn "Event handler (on_text_ctrl_product_new_version_text) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_text_ctrl_product_new_flavour_text
{
    my ($self, $event) = @_;

    my $new_flavour = "$self->{target_directory}/" . $self->{text_ctrl_product_new_flavour}->GetValue();
    #~ $self->{text_ctrl_target_directory}->SetValue("$self->{target_directory}/" . $self->{text_ctrl_product_new_flavour}->GetValue() . "/" . $self->{text_ctrl_product_new_version}->GetValue());
    $self->{text_ctrl_target_directory}->SetValue("$self->{target_directory}/" . $self->{text_ctrl_product_new_flavour}->GetValue());

    return;

    # wxGlade: DPOProductFreezeDlg::on_text_ctrl_product_new_flavour_text <event_handler>
    warn "Event handler (on_text_ctrl_product_new_flavour_text) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPOProductFreezeDlg

1;

