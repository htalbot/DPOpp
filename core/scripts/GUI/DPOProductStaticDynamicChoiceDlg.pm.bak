# generated by wxGlade 0.6.8 on Sun Mar 22 07:35:59 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOProductStaticDynamicChoiceDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $working_project, $libs_with_both_types_ref, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductStaticDynamicChoiceDlg::new
    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{label_1} = Wx::StaticText->new($self, wxID_ANY, _T("New dependencies for:"), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_module} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_56_staticbox} = Wx::StaticBox->new($self, wxID_ANY, "" );
    $self->{list_ctrl_dynamic} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT);
    $self->{button_when_dynamic_use_as_dynamic} = Wx::Button->new($self, wxID_ANY, _T("Use as dynamic"));
    $self->{button_when_dynamic_use_as_static} = Wx::Button->new($self, wxID_ANY, _T("Use as static"));
    $self->{sizer_dynamic_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Dynamic") );
    $self->{list_ctrl_static} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT);
    $self->{button_when_static_use_as_dynamic} = Wx::Button->new($self, wxID_ANY, _T("Use as dynamic"));
    $self->{button_when_staticic_use_as_static} = Wx::Button->new($self, wxID_ANY, _T("Use as static"));
    $self->{sizer_static_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Static") );
    $self->{button_ok} = Wx::Button->new($self, wxID_ANY, _T("Ok"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button_when_dynamic_use_as_dynamic}->GetId, \&on_button_when_dynamic_use_as_dynamic);
    Wx::Event::EVT_BUTTON($self, $self->{button_when_dynamic_use_as_static}->GetId, \&on_button_when_dynamic_use_as_static);
    Wx::Event::EVT_BUTTON($self, $self->{button_when_static_use_as_dynamic}->GetId, \&on_button_when_static_use_as_dynamic);
    Wx::Event::EVT_BUTTON($self, $self->{button_when_staticic_use_as_static}->GetId, \&on_button_when_static_use_as_static);
    Wx::Event::EVT_BUTTON($self, $self->{button_ok}->GetId, \&on_button_ok);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{working_project_ref} = $working_project;
    $self->{libs_with_both_types_ref} = $libs_with_both_types_ref;

    $self->create_list_ctrl_dynamic();

    $self->{text_ctrl_module}->SetValue($self->{working_project_ref}->{name});

    if ($self->{working_project_ref}->{type} == 0)
    {
        $self->{sizer_dynamic_staticbox}->SetLabel("");
        $self->{sizer_dynamic_static}->Show($self->{sizer_static}, 0);
    }
    else
    {
        $self->{sizer_dynamic_staticbox}->SetLabel("When $self->{working_project_ref}->{name} is ***** dynamic *****");
        $self->{sizer_static_staticbox}->SetLabel("When $self->{working_project_ref}->{name} is ***** static *****");
    }

    $self->EnableCloseButton(0);

    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductStaticDynamicChoiceDlg::__set_properties
    $self->SetTitle(_T("Static/Dynamic choice"));
    $self->{list_ctrl_dynamic}->SetMinSize(Wx::Size->new(300, 80));
    $self->{list_ctrl_static}->SetMinSize(Wx::Size->new(300, 235));
    # end wxGlade

    $self->{list_ctrl_dynamic}->SetMinSize(Wx::Size->new(375, 200));
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductStaticDynamicChoiceDlg::__do_layout
    $self->{sizer_21} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_43} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_dynamic_static} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_static_staticbox}->Lower();
    $self->{sizer_static} = Wx::StaticBoxSizer->new($self->{sizer_static_staticbox}, wxVERTICAL);
    $self->{sizer_49} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_dynamic_staticbox}->Lower();
    $self->{sizer_dynamic} = Wx::StaticBoxSizer->new($self->{sizer_dynamic_staticbox}, wxVERTICAL);
    $self->{sizer_42} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_56_staticbox}->Lower();
    $self->{sizer_56} = Wx::StaticBoxSizer->new($self->{sizer_56_staticbox}, wxHORIZONTAL);
    $self->{sizer_56}->Add($self->{label_1}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{sizer_56}->Add($self->{text_ctrl_module}, 1, 0, 0);
    $self->{sizer_21}->Add($self->{sizer_56}, 0, wxEXPAND, 0);
    $self->{sizer_dynamic}->Add($self->{list_ctrl_dynamic}, 1, wxEXPAND, 0);
    $self->{sizer_42}->Add($self->{button_when_dynamic_use_as_dynamic}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_42}->Add($self->{button_when_dynamic_use_as_static}, 0, wxLEFT, 5);
    $self->{sizer_dynamic}->Add($self->{sizer_42}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_dynamic_static}->Add($self->{sizer_dynamic}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_static}->Add($self->{list_ctrl_static}, 1, wxEXPAND, 0);
    $self->{sizer_49}->Add($self->{button_when_static_use_as_dynamic}, 0, 0, 0);
    $self->{sizer_49}->Add($self->{button_when_staticic_use_as_static}, 0, wxLEFT, 5);
    $self->{sizer_static}->Add($self->{sizer_49}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_dynamic_static}->Add($self->{sizer_static}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_21}->Add($self->{sizer_dynamic_static}, 1, wxEXPAND, 0);
    $self->{sizer_43}->Add($self->{button_ok}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_43}->Add($self->{button_cancel}, 0, wxLEFT, 5);
    $self->{sizer_21}->Add($self->{sizer_43}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->SetSizer($self->{sizer_21});
    $self->{sizer_21}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrl_dynamic
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Module");
    $col->SetWidth(150);

    my $create_dynamic = 1;
    my $create_static = 1;
    if ($self->{working_project_ref}->{type} != 7)
    {
        if ($self->{working_project_ref}->{type} == 6)
        {
            $self->{sizer_dynamic_static}->Show($self->{sizer_static}, 0);
            $create_static = 0;
        }

        if ($self->{working_project_ref}->{type} == 5)
        {
            $self->{sizer_dynamic_static}->Show($self->{sizer_dynamic}, 0);
            $create_dynamic = 0;
        }
    }

    $self->{list_ctrl_dynamic}->InsertColumn(0, $col) if $create_dynamic;

    $self->{list_ctrl_static}->InsertColumn(0, $col) if $create_static;

    $col = Wx::ListItem->new();
    $col->SetId(1);
    $col->SetText("Version");
    $col->SetWidth(70);
    $self->{list_ctrl_dynamic}->InsertColumn(1, $col) if $create_dynamic;
    $self->{list_ctrl_static}->InsertColumn(1, $col) if $create_static;

    $col = Wx::ListItem->new();
    $col->SetId(2);
    $col->SetText("Type");
    $col->SetWidth(150);
    $self->{list_ctrl_dynamic}->InsertColumn(2, $col) if $create_dynamic;
    $self->{list_ctrl_static}->InsertColumn(2, $col) if $create_static;

    my $i = 0;
    foreach my $lib (@{$self->{libs_with_both_types_ref}})
    {
        my $type_text;
        if ($lib->{type} eq 0)
        {
            $type_text = "excutable";
        }
        if ($lib->{type} eq 4)
        {
            $type_text = "???";
        }
        if ($lib->{type} eq 5)
        {
            $type_text = "static";
        }
        if ($lib->{type} eq 6)
        {
            $type_text = "dynamic";
        }
        if ($lib->{type} eq 7)
        {
            $type_text = "dynamic/static";
        }

        my $item = Wx::ListItem->new();

        $item->SetId($i);
        $item->SetText($lib->{name});
        $self->{list_ctrl_dynamic}->InsertItem( $item ) if $create_dynamic;
        $self->{list_ctrl_dynamic}->SetItem($i, 1, $lib->{target_version}) if $create_dynamic;
        $self->{list_ctrl_dynamic}->SetItem($i, 2, $type_text) if $create_dynamic;
        my $dynamic_found=0;
        foreach my $x (@{$self->{working_project_ref}->{dependencies_when_dynamic}})
        {
            if ($x->{name} eq $lib->{name})
            {
                $self->{list_ctrl_dynamic}->SetItem($i, 2, "dynamic") if $create_dynamic;
                $dynamic_found = 1;
                last;
            }
        }
        $self->{list_ctrl_static}->InsertItem( $item ) if $create_static;
        $self->{list_ctrl_static}->SetItem($i, 1, $lib->{target_version}) if $create_static;
        $self->{list_ctrl_static}->SetItem($i, 2, $type_text) if $create_static;
        my $static_found=0;
        foreach my $x (@{$self->{working_project_ref}->{dependencies_when_static}})
        {
            if ($x->{name} eq $lib->{name})
            {
                $self->{list_ctrl_static}->SetItem($i, 2, "static") if $create_static;
                $static_found= 1;
                last;
            }
        }

        if (!$dynamic_found)
        {
            $self->{list_ctrl_dynamic}->SetItemBackgroundColour($i, Wx::Colour->new(255, 255, 0)) if $create_dynamic;
        }

        if (!$static_found)
        {
            $self->{list_ctrl_static}->SetItemBackgroundColour($i, Wx::Colour->new(255, 255, 0)) if $create_static;
        }

        $i++;
    }
}

sub validate
{
    my ($self) = @_;

    my @libs_still_7;

    foreach my $x (@{$self->{libs_with_both_types_ref}})
    {
        if ($x->{type} == 7)
        {
            push(@libs_still_7, $x->{name});
        }
    }

    if (scalar(@libs_still_7) != 0)
    {
        my $msg = "The following modules still have both dynamic and static types.\n".
                    "You have to choose between static and dynamic.\n\n";

        foreach my $x (@libs_still_7)
        {
            $msg .= "$x\n";
        }

        Wx::MessageBox($msg, "", Wx::wxOK | Wx::wxICON_ERROR);

        return 0;
    }

    return 1;
}

sub on_button_ok
{
    my ($self, $event) = @_;

    if ($self->validate())
    {
        $self->EndModal(Wx::wxID_OK);
    }

    return;

    # wxGlade: DPOProductStaticDynamicChoiceDlg::on_button_ok <event_handler>
    warn "Event handler (on_button_ok) not implemented";
    $event->Skip;
    # end wxGlade
}



sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductStaticDynamicChoiceDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_when_dynamic_use_as_dynamic
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_dynamic}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $project_name = $self->{list_ctrl_dynamic}->GetItemText($i);

        foreach my $lib (@{$self->{libs_with_both_types_ref}})
        {
            if ($lib->{name} eq $project_name)
            {
                my $found = 0;
                foreach my $x (@{$self->{working_project_ref}->{dependencies_when_dynamic}})
                {
                    if ($x->{name} eq $project_name)
                    {
                        $x->{type} = 6;
                        $found = 1;
                        last;
                    }
                }

                if (!$found)
                {
                    my $new_lib = $lib->clone;
                    $new_lib->{type} = 6;
                    $lib->{type} = 6;

                    push(@{$self->{working_project_ref}->{dependencies_when_dynamic}}, $new_lib);
                }

                $self->{list_ctrl_dynamic}->SetItem($i, 2, "dynamic");
            }
        }
    }

    return;

    # wxGlade: DPOProductStaticDynamicChoiceDlg::on_button_when_dynamic_use_as_dynamic <event_handler>
    warn "Event handler (on_button_when_dynamic_use_as_dynamic) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_when_dynamic_use_as_static
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_dynamic}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $project_name = $self->{list_ctrl_dynamic}->GetItemText($i);

        foreach my $lib (@{$self->{libs_with_both_types_ref}})
        {
            if ($lib->{name} eq $project_name)
            {
                my $found = 0;
                foreach my $x (@{$self->{working_project_ref}->{dependencies_when_dynamic}})
                {
                    if ($x->{name} eq $project_name)
                    {
                        $x->{type} = 5;
                        $found = 1;
                        last;
                    }
                }

                if (!$found)
                {
                    my $new_lib = $lib->clone;
                    $new_lib->{type} = 5;
                    $lib->{type} = 5;

                    push(@{$self->{working_project_ref}->{dependencies_when_dynamic}}, $new_lib);
                }

                $self->{list_ctrl_dynamic}->SetItem($i, 2, "static");
            }
        }
    }

    return;

    # wxGlade: DPOProductStaticDynamicChoiceDlg::on_button_when_dynamic_use_as_static <event_handler>
    warn "Event handler (on_button_when_dynamic_use_as_static) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_when_static_use_as_dynamic
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_static}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $project_name = $self->{list_ctrl_static}->GetItemText($i);

        foreach my $lib (@{$self->{libs_with_both_types_ref}})
        {
            if ($lib->{name} eq $project_name)
            {
                my $found = 0;
                foreach my $x (@{$self->{working_project_ref}->{dependencies_when_static}})
                {
                    if ($x->{name} eq $project_name)
                    {
                        $x->{type} = 6;
                        $found = 1;
                        last;
                    }
                }

                if (!$found)
                {
                    my $new_lib = $lib->clone;
                    $new_lib->{type} = 6;
                    $lib->{type} = 6;

                    push(@{$self->{working_project_ref}->{dependencies_when_static}}, $new_lib);
                }

                $self->{list_ctrl_static}->SetItem($i, 2, "dynamic");
            }
        }
    }

    return;

    # wxGlade: DPOProductStaticDynamicChoiceDlg::on_button_when_static_use_as_dynamic <event_handler>
    warn "Event handler (on_button_when_static_use_as_dynamic) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_when_static_use_as_static
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_static}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $project_name = $self->{list_ctrl_static}->GetItemText($i);

        foreach my $lib (@{$self->{libs_with_both_types_ref}})
        {
            if ($lib->{name} eq $project_name)
            {
                my $found = 0;
                foreach my $x (@{$self->{working_project_ref}->{dependencies_when_static}})
                {
                    if ($x->{name} eq $project_name)
                    {
                        $x->{type} = 5;
                        $found = 1;
                        last;
                    }
                }

                if (!$found)
                {
                    my $new_lib = $lib->clone;
                    $new_lib->{type} = 5;
                    $lib->{type} = 5;

                    push(@{$self->{working_project_ref}->{dependencies_when_static}}, $new_lib);
                }

                $self->{list_ctrl_static}->SetItem($i, 2, "static");
            }
        }
    }

    return;

    # wxGlade: DPOProductStaticDynamicChoiceDlg::on_button_when_static_use_as_static <event_handler>
    warn "Event handler (on_button_when_static_use_as_static) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPOProductStaticDynamicChoiceDlg

1;

