use lib $ENV{DPO_CORE_ROOT} . "/scripts";

# generated by wxGlade 0.6.8 on Mon May 25 13:28:58 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use List::MoreUtils;

use DPOUtils;
use DPOEnvVars;
use DPOProject;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOProductFixDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $panel_product, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductFixDlg::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{notebook_fix} = Wx::Notebook->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
    $self->{notebook_fix_pane_module_replacement} = Wx::Panel->new($self->{notebook_fix}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{label_info} = Wx::StaticText->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, _T("Specify which external project you want to migrate to use with this product.\nFor example, you need to migrate from ACE-6.3.0 to ACE-6.3.1.\n\nIf you want to change version of a project of the product you are working on,\nselect the desired project as the working project and change version \nfrom the working project space."), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_project_name} = Wx::TextCtrl->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER);
    $self->{sizer_47_staticbox} = Wx::StaticBox->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, _T("Project name") );
    $self->{text_ctrl_project_version} = Wx::TextCtrl->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_48_staticbox} = Wx::StaticBox->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, _T("Project version") );
    $self->{sizer_2_staticbox} = Wx::StaticBox->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, _T("Project to migrate to") );
    $self->{text_ctrl_msg} = Wx::TextCtrl->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_4_staticbox} = Wx::StaticBox->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, _T("Message") );
    $self->{button_change} = Wx::Button->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, _T("Change"));
    $self->{button_cancel} = Wx::Button->new($self->{notebook_fix_pane_module_replacement}, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_TEXT($self, $self->{text_ctrl_project_name}->GetId, \&on_text_ctrl_project_name);
    Wx::Event::EVT_BUTTON($self, $self->{button_change}->GetId, \&on_button_change);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{panel_product} = $panel_product;

    $self->{text_ctrl_project_name}->SetFocus();

    $self->{button_change}->Enable(0);

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductFixDlg::__set_properties
    $self->SetTitle(_T("Fix"));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductFixDlg::__do_layout
    $self->{sizer_fix} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_32} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_41} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_58} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_4_staticbox}->Lower();
    $self->{sizer_4} = Wx::StaticBoxSizer->new($self->{sizer_4_staticbox}, wxHORIZONTAL);
    $self->{sizer_2_staticbox}->Lower();
    $self->{sizer_2} = Wx::StaticBoxSizer->new($self->{sizer_2_staticbox}, wxHORIZONTAL);
    $self->{sizer_48_staticbox}->Lower();
    $self->{sizer_48} = Wx::StaticBoxSizer->new($self->{sizer_48_staticbox}, wxHORIZONTAL);
    $self->{sizer_47_staticbox}->Lower();
    $self->{sizer_47} = Wx::StaticBoxSizer->new($self->{sizer_47_staticbox}, wxHORIZONTAL);
    $self->{sizer_32}->Add($self->{label_info}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 10);
    $self->{sizer_47}->Add($self->{text_ctrl_project_name}, 0, wxEXPAND, 0);
    $self->{sizer_2}->Add($self->{sizer_47}, 1, wxTOP|wxEXPAND, 10);
    $self->{sizer_48}->Add($self->{text_ctrl_project_version}, 1, 0, 0);
    $self->{sizer_2}->Add($self->{sizer_48}, 1, wxLEFT|wxTOP, 10);
    $self->{sizer_41}->Add($self->{sizer_2}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_4}->Add($self->{text_ctrl_msg}, 1, 0, 0);
    $self->{sizer_41}->Add($self->{sizer_4}, 1, wxEXPAND, 0);
    $self->{sizer_58}->Add($self->{button_change}, 0, 0, 0);
    $self->{sizer_58}->Add($self->{button_cancel}, 0, wxLEFT, 5);
    $self->{sizer_41}->Add($self->{sizer_58}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 10);
    $self->{sizer_32}->Add($self->{sizer_41}, 0, wxALL|wxEXPAND, 5);
    $self->{notebook_fix_pane_module_replacement}->SetSizer($self->{sizer_32});
    $self->{notebook_fix}->AddPage($self->{notebook_fix_pane_module_replacement}, _T("External module migration"));
    $self->{sizer_fix}->Add($self->{notebook_fix}, 1, wxEXPAND, 0);
    $self->SetSizer($self->{sizer_fix});
    $self->{sizer_fix}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub read_version
{
    my ($self) = @_;

    my $project_name = $self->{text_ctrl_project_name}->GetValue();
    if ($project_name eq "")
    {
        return;
    }

    my $env_var_id = uc($project_name) . "_PRJ_ROOT";
    my $path = "\$($env_var_id)";
    if (DPOEnvVars::expand_env_var(\$path))
    {
        if (-e "$path/DPOProject.xml")
        {
            my $major=0;
            my $minor=0;
            my $patch=0;
            if (DPOProject::read_project_version($path,
                                                \$major,
                                                \$minor,
                                                \$patch))
            {
                $self->{text_ctrl_project_version}->SetValue("$major.$minor.$patch");
                $self->{button_change}->Enable(1);
                $self->{button_change}->SetFocus();
                $self->{text_ctrl_msg}->SetValue("");
            }
            else
            {
                $self->{text_ctrl_msg}->SetValue("Can't read version of $project_name");
                return;
            }
        }
    }
    else
    {
        $env_var_id = uc($project_name) . "_ROOT";
        $path = "\$($env_var_id)";
        if (DPOEnvVars::expand_env_var(\$path))
        {
            my ($version) = $path =~ /.*\/(.*)/;
            if ($version =~ /\d+\.\d+\.\d+/) # Can be flavour. Don't act when not version.
            {
                $self->{text_ctrl_project_version}->SetValue($version);
                $self->{button_change}->Enable(1);
                $self->{button_change}->SetFocus();
                $self->{text_ctrl_msg}->SetValue("");
            }
        }
        else
        {
            #~ Wx::MessageBox("$env_var_id env. var. is not defined.");
            return;
        }
    }

    return;
}

#eeeeeeeeeeeeeeeevent handlers
sub on_button_change
{
    my ($self, $event) = @_;

    my $project_name = $self->{text_ctrl_project_name}->GetValue();
    my $version = $self->{text_ctrl_project_version}->GetValue();

    if (List::MoreUtils::any {$_->{name} eq $project_name} @{$self->{panel_product}->{workspace_projects}})
    {
        Wx::MessageBox("'$project_name' is a workspace project. To change the version of $project_name, please select $project_name as working project.", "", Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    my $wait = Wx::BusyCursor->new();

    foreach my $loaded_project (@{$self->{panel_product}->{loaded_projects}})
    {
        my $save = 0;

        if ($loaded_project->{name} eq $project_name)
        {
            $loaded_project->{version} = $version;
            $loaded_project->{target_version} = $version;
        }

        foreach my $dep (@{$loaded_project->{dependencies_when_dynamic}}, @{$loaded_project->{dependencies_when_static}})
        {
            if ($dep->{name} eq $project_name)
            {
                $dep->{version} = $version;
                $dep->{target_version} = $version;
                $save = 1;
            }
        }

        if ($save)
        {
            if (!$self->{panel_product}->save_project($loaded_project))
            {
                DPOLog::report_msg(DPOEvents::GENERIC_ERROR, ["Can't save project $loaded_project->{name}"]);
                return 0;
            }
        }
    }

    foreach my $runtime_product_compliant (@{$self->{panel_product}->{this_product}->{runtime}->{runtime_products_compliant}})
    {
        foreach my $project_dependency (@{$runtime_product_compliant->{dpo_project_dependencies}})
        {
            if ($project_dependency->{name} eq $project_name)
            {
                $project_dependency->{version} = $version;
                $project_dependency->{target_version} = $version;
            }
        }
    }

    foreach my $runtime_product_non_compliant (@{$self->{this_product}->{runtime}->{runtime_products_non_compliant}})
    {
        if ($runtime_product_non_compliant->{name} eq $project_name)
        {
            $runtime_product_non_compliant->{version} = $version;
        }
    }
    $self->{panel_product}->save_runtime();

    foreach my $project (@{$self->{panel_product}->{workspace_projects}})
    {
        foreach my $dep (@{$project->{dependencies_when_dynamic}}, @{$project->{dependencies_when_static}})
        {
            if ($dep->{name} eq $project_name)
            {
                $dep->{version} = $version;
                $dep->{target_version} = $version;
            }
        }
    }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductFixDlg::on_button_change <event_handler>
    warn "Event handler (on_button_change) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductFixDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_text_ctrl_project_name
{
    my ($self, $event) = @_;

    $self->{text_ctrl_project_version}->SetValue("");
    $self->{button_change}->Enable(0);

    $self->read_version();

    return;

    # wxGlade: DPOProductFixDlg::on_text_ctrl_project_name <event_handler>
    warn "Event handler (on_text_ctrl_project_name) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPOProductFixDlg

1;

