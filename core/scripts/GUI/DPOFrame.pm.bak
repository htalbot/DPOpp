use lib $ENV{DPO2_CORE_ROOT} . "/scripts";
use lib $ENV{DPO2_CORE_ROOT} . "/scripts/GUI";

# generated by wxGlade 0.6.8 on Fri Sep 04 05:00:53 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOFrame;

use DPOMPB;
use DPOPanelProduct;
use DPOPanelExternalProductMigration;
use DPOPanelPool;
use DPOPanelInfo;
use DPOEvents;

use Wx qw[:everything];
use base qw(Wx::Frame);

#~ use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';
use Wx::Locale gettext => '_T';

use constant
{
    MSG_CLEAR => 0
};

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOFrame::new
    $style = wxDEFAULT_FRAME_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{splitter_main} = Wx::SplitterWindow->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
    $self->{splitter_main_pane_work} = Wx::Panel->new($self->{splitter_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{notebook_main} = Wx::Notebook->new($self->{splitter_main_pane_work}, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);
    $self->{notebook_main_pane_product} = Wx::Panel->new($self->{notebook_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{panel_product} = DPOPanelProduct->new($self->{notebook_main_pane_product}, wxID_ANY);
    $self->{notebook_main_pane_external_product_migration} = Wx::Panel->new($self->{notebook_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{panel_external_product_migration} = DPOPanelExternalProductMigration->new($self->{notebook_main_pane_external_product_migration}, wxID_ANY);
    $self->{notebook_main_pane_pool} = Wx::Panel->new($self->{notebook_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{panel_pool} = DPOPanelPool->new($self->{notebook_main_pane_pool}, wxID_ANY);
    $self->{notebook_main_pane_info} = Wx::Panel->new($self->{notebook_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{panel_info} = DPOPanelInfo->new($self->{notebook_main_pane_info}, wxID_ANY);
    $self->{splitter_main_pane_msg} = Wx::Panel->new($self->{splitter_main}, wxID_ANY, wxDefaultPosition, wxDefaultSize, );
    $self->{list_ctrl_msg} = Wx::ListCtrl->new($self->{splitter_main_pane_msg}, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);

    $self->__set_properties();
    $self->__do_layout();

    # end wxGlade

    Wx::Event::EVT_LIST_ITEM_RIGHT_CLICK($self, $self->{list_ctrl_msg}->GetId, \&on_list_ctrl_right_click);
    Wx::Event::EVT_MENU($self, MSG_CLEAR, \&on_msg_clear);


    $self->{splitter_main}->SetMinimumPaneSize(50);
    my ($w, $h) = $self->GetSizeWH();
    $self->{splitter_main}->SetSashPosition(0.70 * $h);

    $self->{events} = DPOEvents->new();

    $self->create_list_ctrl_msg();

    $self->{panel_product}->{frame} = $self;
    $self->{panel_external_product_migration}->{frame} = $self;
    $self->{panel_pool}->{frame} = $self;

    DPOLog::set_frame($self);

    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOFrame::__set_properties
    $self->SetTitle(_T("DPO"));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOFrame::__do_layout
    $self->{sizer_main} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_msg} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_work} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_info} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_pool} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_external_product_pool} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_product} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_product}->Add($self->{panel_product}, 1, wxEXPAND, 0);
    $self->{notebook_main_pane_product}->SetSizer($self->{sizer_product});
    $self->{sizer_external_product_pool}->Add($self->{panel_external_product_migration}, 1, wxEXPAND, 0);
    $self->{notebook_main_pane_external_product_migration}->SetSizer($self->{sizer_external_product_pool});
    $self->{sizer_pool}->Add($self->{panel_pool}, 1, wxEXPAND, 0);
    $self->{notebook_main_pane_pool}->SetSizer($self->{sizer_pool});
    $self->{sizer_info}->Add($self->{panel_info}, 1, wxEXPAND, 0);
    $self->{notebook_main_pane_info}->SetSizer($self->{sizer_info});
    $self->{notebook_main}->AddPage($self->{notebook_main_pane_product}, _T("Product"));
    $self->{notebook_main}->AddPage($self->{notebook_main_pane_external_product_migration}, _T("External product migration"));
    $self->{notebook_main}->AddPage($self->{notebook_main_pane_pool}, _T("Pool"));
    $self->{notebook_main}->AddPage($self->{notebook_main_pane_info}, _T("Info"));
    $self->{sizer_work}->Add($self->{notebook_main}, 1, wxEXPAND, 0);
    $self->{splitter_main_pane_work}->SetSizer($self->{sizer_work});
    $self->{sizer_msg}->Add($self->{list_ctrl_msg}, 1, wxEXPAND, 0);
    $self->{splitter_main_pane_msg}->SetSizer($self->{sizer_msg});
    $self->{splitter_main}->SplitHorizontally($self->{splitter_main_pane_work}, $self->{splitter_main_pane_msg}, );
    $self->{sizer_main}->Add($self->{splitter_main}, 1, wxEXPAND, 0);
    $self->SetSizer($self->{sizer_main});
    $self->{sizer_main}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub report_msg
{
    my ($self, $event_no, $event_params, $caller) = @_;

    my $msg = $self->{events}->get_text($event_no, $event_params);

    my $item = Wx::ListItem->new();

    my $count = $self->{list_ctrl_msg}->GetItemCount();
    $item->SetId($count);
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    my $timestamp = sprintf ( "%04d-%02d-%02d %02d:%02d:%02d",
                                    $year+1900,
                                    $mon+1,
                                    $mday,
                                    $hour,
                                    $min,
                                    $sec);

    # Info by default
    my $background_color = Wx::Colour->new(255, 255, 255);
    my $foreground_color = Wx::Colour->new(0, 0, 0);

    # Error
    if ($self->{events}->get_level($event_no) == DPOEvents::EVENT_TYPE_ERROR)
    {
        $foreground_color = Wx::Colour->new(255, 255, 255);
        $background_color = Wx::Colour->new(255, 0, 0);
    }

    # Warning
    if ($self->{events}->get_level($event_no) == DPOEvents::EVENT_TYPE_WARNING)
    {
        $background_color = Wx::Colour->new(255, 255, 0);
        $foreground_color = Wx::Colour->new(0, 0, 0);
    }

    $item->SetText($timestamp);
    $item->SetTextColour($foreground_color);
    $item->SetBackgroundColour($background_color);

    $self->{list_ctrl_msg}->InsertItem( $item );
    $self->{list_ctrl_msg}->SetItem($count, 1, $event_no);
    $self->{list_ctrl_msg}->SetItem($count, 2, $caller);
    $self->{list_ctrl_msg}->SetItem($count, 3, $msg);

    $self->{list_ctrl_msg}->EnsureVisible($count);
}

sub create_list_ctrl_msg
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Timestamp");
    $col->SetWidth(120);
    $self->{list_ctrl_msg}->InsertColumn(0, $col);

    $col = Wx::ListItem->new();
    $col->SetId(1);
    $col->SetText("Event");
    $col->SetWidth(50);
    $self->{list_ctrl_msg}->InsertColumn(1, $col);

    $col = Wx::ListItem->new();
    $col->SetId(1);
    $col->SetText("Source");
    $col->SetWidth(220);
    $self->{list_ctrl_msg}->InsertColumn(2, $col);

    $col = Wx::ListItem->new();
    $col->SetId(2);
    $col->SetText("Message");
    $col->SetWidth(1800);
    $self->{list_ctrl_msg}->InsertColumn(3, $col);
}


#### Eeeeeevent handlers
sub on_list_ctrl_right_click
{
    my ($self, $event) = @_;

    my $menuPopUp = Wx::Menu->new();

    $menuPopUp->Append(MSG_CLEAR, "Clear");
    $self->{list_ctrl_msg}->PopupMenu($menuPopUp, $event->GetPoint());
}

sub on_msg_clear
{
    my ($self, $event) = @_;

    $self->{list_ctrl_msg}->DeleteAllItems();
}


# end of class DPOFrame

1;

