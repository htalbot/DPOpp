# generated by wxGlade 0.6.8 on Fri Oct 02 12:41:44 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOFrameRecalls;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $recalls_ref, $button_recall, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOFrameRecalls::new
    $style = wxDEFAULT_FRAME_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{list_ctrl_recalls} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{button_processed} = Wx::Button->new($self, wxID_ANY, _T("Processed"));
    $self->{button_not_processed} = Wx::Button->new($self, wxID_ANY, _T("Not processed"));
    $self->{button_close} = Wx::Button->new($self, wxID_ANY, _T("Close"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button_processed}->GetId, \&on_button_processed);
    Wx::Event::EVT_BUTTON($self, $self->{button_not_processed}->GetId, \&on_button_not_processed);
    Wx::Event::EVT_BUTTON($self, $self->{button_close}->GetId, \&on_button_close);

    # end wxGlade

    $self->{recalls_ref} = $recalls_ref;
    $self->{button_recall} = $button_recall;

    $self->create_list_ctrl();

    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOFrameRecalls::__set_properties
    $self->SetTitle(_T("Recalls"));
    $self->SetSize(Wx::Size->new(800, 400));
    # end wxGlade

    $self->SetSize(Wx::Size->new(800, 400));
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOFrameRecalls::__do_layout
    $self->{sizer_107} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_109} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_107}->Add($self->{list_ctrl_recalls}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_109}->Add($self->{button_processed}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_109}->Add($self->{button_not_processed}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_107}->Add($self->{sizer_109}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_107}->Add($self->{button_close}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_107});
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrl
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Status");
    $col->SetWidth(60);
    $self->{list_ctrl_recalls}->InsertColumn(0, $col);

    $col = Wx::ListItem->new();
    $col->SetId(1);
    $col->SetText("Recall");
    $col->SetWidth(740);
    $self->{list_ctrl_recalls}->InsertColumn(1, $col);

    $self->refresh_list_ctrl();
}

sub refresh_list_ctrl
{
    my ($self) = @_;

    $self->{list_ctrl_recalls}->DeleteAllItems();

    my $i = 0;
    foreach my $recall (sort {$a->{status} cmp $b->{status}} @{$self->{recalls_ref}})
    {
        my $item = Wx::ListItem->new();

        $item->SetId($i);
        $item->SetText($recall->{status});
        $self->{list_ctrl_recalls}->InsertItem( $item );
        $self->{list_ctrl_recalls}->SetItem($i, 1, $recall->{recall_text});

        $i++;
    }
}


#####EEEEEEEEEEEEEEEvent handlers
sub on_button_processed
{
    my ($self, $event) = @_;

    if ($self->{list_ctrl_recalls}->GetSelectedItemCount() == 0)
    {
        Wx::MessageBox("no selection");
        return;
    }

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_recalls}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $item = $self->{list_ctrl_recalls}->GetItem($i, 1);

        my $recall_text = $item->GetText();

        foreach my $recall (@{$self->{recalls_ref}})
        {
            if ($recall->{recall_text} eq $recall_text)
            {
                $recall->{status} = "processed";
            }
        }
    }

    $self->refresh_list_ctrl();

    return;

    # wxGlade: DPOFrameRecalls::on_button_processed <event_handler>
    warn "Event handler (on_button_processed) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_not_processed
{
    my ($self, $event) = @_;

    if ($self->{list_ctrl_recalls}->GetSelectedItemCount() == 0)
    {
        Wx::MessageBox("no selection");
        return;
    }

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_recalls}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $item = $self->{list_ctrl_recalls}->GetItem($i, 1);

        my $recall_text = $item->GetText();

        foreach my $recall (@{$self->{recalls_ref}})
        {
            if ($recall->{recall_text} eq $recall_text)
            {
                $recall->{status} = "new";
            }
        }
    }

    $self->refresh_list_ctrl();

    return;

    # wxGlade: DPOFrameRecalls::on_button_not_processed <event_handler>
    warn "Event handler (on_button_not_processed) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_close
{
    my ($self, $event) = @_;

    my $count = 0;
    foreach my $recall (@{$self->{recalls_ref}})
    {
        if ($recall->{status} eq "processed")
        {
            $count++;
        }
    }

    if ($count != 0
        && $count == scalar(@{$self->{recalls_ref}}))
    {
        my $rc = Wx::MessageBox(
                    "All recalls are set to 'processed'.\n".
                    "Do you want to clear recalls?\n\n",
                    "",
                    Wx::wxYES_NO | Wx::wxICON_QUESTION);
        if ($rc == Wx::wxYES)
        {
            splice(@{$self->{recalls_ref}});
            $self->{button_recall}->SetBackgroundColour(Wx::SystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
        }
    }

    $self->Destroy();

    return;

    # wxGlade: DPOFrameRecalls::on_button_close <event_handler>
    warn "Event handler (on_button_close) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class DPOFrameRecalls

1;

