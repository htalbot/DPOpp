use lib $ENV{DPO2_CORE_ROOT} . "/scripts";

use DPOUtils;

my $col_version = Wx::Colour->new(248, 255, 175);
my $col_version_bad = Wx::Colour->new(255, 0, 0);

# generated by wxGlade 0.6.8 on Mon Mar 09 16:00:22 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOProductVersionDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $version, $new_version, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductVersionDlg::new
    $style = wxDEFAULT_DIALOG_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{label_prev_version} = Wx::StaticText->new($self, wxID_ANY, _T("Previous version:"), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_prev_version} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{label_new_version} = Wx::StaticText->new($self, wxID_ANY, _T("New version:"), wxDefaultPosition, wxDefaultSize, );
    $self->{text_ctrl_new_version} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{list_ctrl_msg} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{button_ok} = Wx::Button->new($self, wxID_ANY, _T("Ok"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_TEXT($self, $self->{text_ctrl_new_version}->GetId, \&on_text_working_project);
    Wx::Event::EVT_BUTTON($self, $self->{button_ok}->GetId, \&on_button_ok);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{text_ctrl_prev_version}->SetValue($version);
    $self->{text_ctrl_new_version}->SetValue($new_version);

    $self->{text_ctrl_new_version}->SetFocus();
    $self->{text_ctrl_new_version}->SetInsertionPointEnd();

    $self->create_list_ctrl_msg();

    $self->{button_ok}->Enable(0);

    $self->{button_ok}->SetDefault();

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductVersionDlg::__set_properties
    $self->SetTitle(_T("Version"));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductVersionDlg::__do_layout
    $self->{sizer_17} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_19} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_25} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_25}->Add($self->{label_prev_version}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{sizer_25}->Add($self->{text_ctrl_prev_version}, 0, wxLEFT, 3);
    $self->{sizer_25}->Add($self->{label_new_version}, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, 10);
    $self->{sizer_25}->Add($self->{text_ctrl_new_version}, 0, wxLEFT, 3);
    $self->{sizer_17}->Add($self->{sizer_25}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 10);
    $self->{sizer_17}->Add($self->{list_ctrl_msg}, 1, wxEXPAND, 0);
    $self->{sizer_19}->Add($self->{button_ok}, 0, wxALL, 5);
    $self->{sizer_19}->Add($self->{button_cancel}, 0, wxALL, 5);
    $self->{sizer_17}->Add($self->{sizer_19}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_17});
    $self->{sizer_17}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrl_msg
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Timestamp");
    #~ $col->SetWidth(150);
    $col->SetWidth(500);
    $self->{list_ctrl_msg}->InsertColumn(0, $col);

    # BUG-01: doesn't work...
    #~ $col = Wx::ListItem->new();
    #~ $col->SetId(1);
    #~ $col->SetText("Message");
    #~ $col->SetWidth(400);
    #~ $self->{list_ctrl_msg}->InsertColumn(1, $col);
}

sub report_msg
{
    my ($self, $msg, $background_color, $foreground_color) = @_;

    my $count = $self->{list_ctrl_msg}->GetItemCount();

    my $item = Wx::ListItem->new();
    $item->SetId($count);

    # BUG-01: doesn't work...
    #~ my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    #~ my $timestamp = sprintf ( "%04d-%02d-%02d %02d:%02d:%02d",
                                    #~ $year+1900,
                                    #~ $mon+1,
                                    #~ $mday,
                                    #~ $hour,
                                    #~ $min,
                                    #~ $sec);

    #~ print "TTTTTTTTTTT $timestamp: $msg\n";
    #~ $item->SetText($timestamp);
    $item->SetText($msg);

    $self->{list_ctrl_msg}->InsertItem( $item );
    # BUG-01: doesn't work...
    #~ $self->{list_ctrl_msg}->SetItem($count, 1, $msg);

    $self->{list_ctrl_msg}->SetItemBackgroundColour($count, $background_color);
    $self->{list_ctrl_msg}->SetTextColour($foreground_color);

    $self->{list_ctrl_msg}->EnsureVisible($count);
}

sub remove_msg
{
    my ($self, $msg_in) = @_;

    my @msg_to_remove;
    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_msg}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_DONTCARE);
        if ( $i == -1 )
        {
            last;
        }

        # BUG-01: doesn't work...
        #~ my $msg = $self->{list_ctrl_msg}->GetItem($i, 1)->GetText();
        my $msg = $self->{list_ctrl_msg}->GetItem($i, 0)->GetText();

        if ($msg =~ /\Q$msg_in\E/)
        {
            push(@msg_to_remove, $i);
        }
    }

    foreach my $x (sort {$b cmp $a} @msg_to_remove)
    {
        $self->{list_ctrl_msg}->DeleteItem($x);
    }

}

sub on_button_ok
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductVersionDlg::on_button_ok <event_handler>
    warn "Event handler (on_button_ok) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductVersionDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_text_working_project
{
    my ($self, $event) = @_;

    my $new_version = $event->GetString();

    my $err_msg="";
    if (!DPOUtils::valid_version_format(
            $self->{text_ctrl_prev_version}->GetValue(),
            $new_version,
            1)) # prevent_order_check
    {
        $self->report_msg("Bad version", $col_version_bad, Wx::Colour->new(255, 255, 255));
    }
    else
    {
        $self->{text_ctrl_new_version}->SetToolTip("");

        # Remove the "Bad version" messages
        $self->remove_msg("Bad version");

        $self->{button_ok}->Enable(1);
    }

    return;

    # wxGlade: DPOProductVersionDlg::on_text_working_project <event_handler>
    warn "Event handler (on_text_working_project) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPOProductVersionDlg

1;

