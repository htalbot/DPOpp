use lib $ENV{DPO_CORE_ROOT} . "/scripts";


# generated by wxGlade 0.6.8 on Thu Jan 14 04:25:23 2016
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
use Cwd;
use DPOUtils;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPODropTarget; # Drag and drop class

use Wx qw[:everything];
#~ use Wx::DND;
use base qw( Wx::TextDropTarget );

sub new
{
    my $class = shift;
    my $panel= shift;

    my $self = $class->SUPER::new(@_);

    $self->{panel} = $panel;

    return $self;
}

sub OnDropText
{
    my ( $self, $x, $y, $source ) = @_;

    #~ print "OnDropText... $source\n";

    $self->{panel}->drag_copy($x, $y, $source);

    return 1;    # important
}

1;


package DPONonMPCLibAssociationDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $product_name, $product_path, $libs_ref, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPONonMPCLibAssociationDlg::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{label_info} = Wx::StaticText->new($self, wxID_ANY, _T("DPO tries to associate libs and dlls. Sometimes it fails and you have to do it yourself..."), wxDefaultPosition, wxDefaultSize, );
    $self->{list_ctrl_lib} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{list_ctrl_dll} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{button_predefined_associations} = Wx::Button->new($self, wxID_ANY, _T("Predefined associations"));
    $self->{button_save} = Wx::Button->new($self, wxID_ANY, _T("Save associations"));
    $self->{button_ok} = Wx::Button->new($self, wxID_ANY, _T("Ok"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_LIST_BEGIN_DRAG($self, $self->{list_ctrl_dll}->GetId, \&on_list_ctrl_dll_begin_drag);
    Wx::Event::EVT_BUTTON($self, $self->{button_predefined_associations}->GetId, \&on_button_predefined_associations);
    Wx::Event::EVT_BUTTON($self, $self->{button_save}->GetId, \&on_button_save);
    Wx::Event::EVT_BUTTON($self, $self->{button_ok}->GetId, \&on_button_ok);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{product_name} = $product_name;
    $self->{product_path} = $product_path;
    $self->{libs_ref} = $libs_ref;
    $self->{dlls} = [];

    $self->create_list_ctrls();
    $self->fill_list_ctrl_lib();
    $self->fill_list_ctrl_dll();

    $self->SetDropTarget(DPODropTarget->new($self));

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPONonMPCLibAssociationDlg::__set_properties
    $self->SetTitle(_T("Non MPC compliant lib association"));
    $self->SetSize(Wx::Size->new(1000, 600));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPONonMPCLibAssociationDlg::__do_layout
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_3} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_4} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_5} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_2} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_1}->Add($self->{label_info}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_2}->Add($self->{list_ctrl_lib}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_2}->Add($self->{list_ctrl_dll}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_1}->Add($self->{sizer_2}, 1, wxALL|wxEXPAND, 10);
    $self->{sizer_5}->Add($self->{button_predefined_associations}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_5}->Add($self->{button_save}, 0, wxLEFT, 5);
    $self->{sizer_3}->Add($self->{sizer_5}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_4}->Add($self->{button_ok}, 0, 0, 0);
    $self->{sizer_4}->Add($self->{button_cancel}, 0, wxLEFT, 5);
    $self->{sizer_3}->Add($self->{sizer_4}, 1, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_1}->Add($self->{sizer_3}, 0, wxBOTTOM|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_1});
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrls
{
    my ($self) = @_;

    # Create list_ctrl_lib
    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("lib id");
    $col->SetWidth(200);
    $self->{list_ctrl_lib}->InsertColumn(0, $col);

    $col->SetId(1);
    $col->SetText("associated dll");
    $col->SetWidth(200);
    $self->{list_ctrl_lib}->InsertColumn(1, $col);

    # Create list_ctrl_dll
    $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("dll");
    $col->SetWidth(200);
    $self->{list_ctrl_dll}->InsertColumn(0, $col);
}

sub fill_list_ctrl_lib
{
    my ($self) = @_;

    foreach my $lib (@{$self->{libs_ref}})
    {
        if ($lib->{type} eq "static")
        {
            next;
        }

        my $item = Wx::ListItem->new();

        $item->SetId($self->{list_ctrl_lib}->GetItemCount());
        $item->SetText("$lib->{dynamic_debug_lib} (Debug)");
        $self->{list_ctrl_lib}->InsertItem($item);

        $item->SetId($self->{list_ctrl_lib}->GetItemCount());
        $item->SetText("$lib->{dynamic_release_lib} (Release)");
        $self->{list_ctrl_lib}->InsertItem($item);
    }
}

sub fill_list_ctrl_dll
{
    my ($self) = @_;

    $self->get_dll($self->{product_path});

    foreach my $dll (@{$self->{dlls}})
    {
        my $item = Wx::ListItem->new();

        my ($dll_id) = $dll =~ /.*\/(.*\.dll)/;

        $item->SetId($self->{list_ctrl_dll}->GetItemCount());
        $item->SetText($dll_id);
        $self->{list_ctrl_dll}->InsertItem($item);
    }
}

sub drag_copy
{
    my ($self, $x, $y, $source) = @_;

    # Determine the source list control
    my $ctrl_source;

    my ($widget, $value) = $source =~ /(.*)\/(.*)/;

    if ($widget ne "list_ctrl_dll")
    {
        return;
    }

    # Find the target widget
    my @point = $self->ClientToScreen($x, $y);

    my $target;

    if (DPOUtils::point_in_widget($self->{list_ctrl_lib}, \@point))
    {
        my @item_point = $self->{list_ctrl_lib}->ScreenToClient($point[0], $point[1]);
        my ($item_no, $flag) = $self->{list_ctrl_lib}->HitTest(\@item_point);
        $self->{list_ctrl_lib}->SetItem($item_no, 1, $value);
    }

    $self->valid_dll();
}

sub predefined_non_mpc_compliant_lib_associations_dir
{
    my ($self, $predefined_dir_ref) =  @_;

    my $dpo_templates_root = "\$(DPO_TEMPLATES_ROOT)";
    if (!DPOEnvVars::expand_env_var(\$dpo_templates_root))
    {
        DPOLog::report_msg(DPOEvents::ENV_VAR_NOT_DEFINED, ["DPO_TEMPLATES_ROOT"]);
        return;
    }

    $$predefined_dir_ref = $dpo_templates_root .= "/non_mpc_compliant_associations/$self->{product_name}";
}

sub get_dll
{
    my ($self, $path) = @_;

    my @content;
    if (DPOUtils::get_dir_content($path, \@content))
    {
        foreach my $elem (@content)
        {
            my $complete = "$path/$elem";
            if (-d $complete)
            {
                $self->get_dll($complete);
            }
            else
            {
                if ($elem =~ /\.dll$/)
                {
                    push(@{$self->{dlls}}, $complete);
                }
            }
        }
    }
}

sub valid_dll
{
    my ($self, $dll) = @_;

    my $ok = 1;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_lib}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_DONTCARE);
        if ( $i == -1 )
        {
            last;
        }

        my $item_dll = $self->{list_ctrl_lib}->GetItem($i, 1);
        my $dll = $item_dll->GetText();

        my $found = 0;
        foreach my $existing_dll (@{$self->{dlls}})
        {
            if ($existing_dll =~ /$dll/)
            {
                $found = 1;
                last;
            }
        }
        if (!$found)
        {
            $self->{list_ctrl_lib}->SetItemBackgroundColour($i, Wx::Colour->new(255, 255, 0));
            $ok = 0;
        }
        else
        {
            $self->{list_ctrl_lib}->SetItemBackgroundColour($i, Wx::Colour->new(255, 255, 255));
        }
    }

    return $ok;
}


###EEEEEEEEEEEEEvent handler

sub on_button_predefined_associations
{
    my ($self, $event) = @_;

    my $predefined_dir;
    if (!$self->predefined_non_mpc_compliant_lib_associations_dir(\$predefined_dir))
    {
        return;
    }

    my $dlg = Wx::DirDialog->new($self, "Predefined Non MPC Compliant associations directory", $predefined_dir);
    my $rc = $dlg->ShowModal();
    if ($rc == Wx::wxID_OK)
    {
        my $predefined_dir = $dlg->GetPath();
        $predefined_dir =~ s/\\/\//g;

        if (-d $predefined_dir)
        {
            my $found = 0;

            my $associations_file = "$predefined_dir/associations";
            my @lines;
            if (DPOUtils::get_file_lines($associations_file, \@lines))
            {
                my $i = -1;
                for ( ;; )
                {
                    $i = $self->{list_ctrl_lib}->GetNextItem($i,
                                                Wx::wxLIST_NEXT_ALL,
                                                Wx::wxLIST_STATE_DONTCARE);
                    if ( $i == -1 )
                    {
                        last;
                    }

                    my ($lib_id) = $self->{list_ctrl_lib}->GetItemText($i) =~ /(.*)\s+\(/;

                    foreach my $line (@lines)
                    {
                        chomp $line;

                        my ($lib_id_file, $dll) = $line =~ /(.*?)\s+(.*)/;
                        if ($lib_id_file eq $lib_id)
                        {
                            $self->{list_ctrl_lib}->SetItem($i, 1, $dll);
                        }
                    }
                }
            }

            if (!$self->valid_dll())
            {
                Wx::MessageBox("A dll from the predefined non mpc compliant lib associations file doesn't exist", "", Wx::wxOK | Wx::wxICON_ERROR);
            }
        }
    }

    return;

    # wxGlade: DPONonMPCLibAssociationDlg::on_button_predefined_associations <event_handler>
    warn "Event handler (on_button_predefined_associations) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_ok
{
    my ($self, $event) = @_;

    if (!$self->valid_dll())
    {
        Wx::MessageBox("A dll from the predefined non mpc compliant lib associations file doesn't exist", "", Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_lib}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_DONTCARE);
        if ( $i == -1 )
        {
            last;
        }

        my $lib_id = $self->{list_ctrl_lib}->GetItemText($i);
        ($lib_id, my $type) = $lib_id =~ /(.*)\s+\((.*)\)/;

        # wxWidgets < 2.9.1 (we must get column 1 value by getting item this way...)
        my $item_dll = $self->{list_ctrl_lib}->GetItem($i, 1);
        my $dll_text = $item_dll->GetText();

        foreach my $lib (@{$self->{libs_ref}})
        {
            if ($type eq "Debug")
            {
                if ($lib->{dynamic_debug_lib} eq $lib_id)
                {
                    $lib->{dynamic_debug_dll} = $dll_text;
                    next;
                }
            }

            if ($type eq "Release")
            {
                if ($lib->{dynamic_release_lib} eq $lib_id)
                {
                    $lib->{dynamic_release_dll} = $dll_text;
                    next;
                }
            }
        }
    }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPONonMPCLibAssociationDlg::on_button_ok <event_handler>
    warn "Event handler (on_button_ok) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_list_ctrl_dll_begin_drag
{
    my ($self, $event) = @_;

    my $index = $event->GetIndex();

    my $value = $self->{list_ctrl_dll}->GetItemText($index);

    my $text_obj = Wx::TextDataObject->new("list_ctrl_dll/$value");

    my $source = Wx::DropSource->new($self->{list_ctrl_dll});
    $source->SetData($text_obj);

    my $drop_result = $source->DoDragDrop();

    return;

    # wxGlade: DPONonMPCLibAssociationDlg::on_list_ctrl_dll_begin_drag <event_handler>
    warn "Event handler (on_list_ctrl_dll_begin_drag) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPONonMPCLibAssociationDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_save
{
    my ($self, $event) = @_;

    if (!$self->valid_dll())
    {
        Wx::MessageBox("Can't save because a dll from the predefined non mpc compliant lib associations file doesn't exist", "", Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    my %associations;
    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_lib}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_DONTCARE);
        if ( $i == -1 )
        {
            last;
        }

        my $lib_id = $self->{list_ctrl_lib}->GetItemText($i);
        ($lib_id) = $lib_id =~ /(.*)\s+\(/;

        # wxWidgets < 2.9.1 (we must get column 1 value by getting item this way...)
        my $item_dll = $self->{list_ctrl_lib}->GetItem($i, 1);
        my $dll_text = $item_dll->GetText();

        $associations{$lib_id} = $dll_text;
    }

    my $not_assigned = "";
    foreach my $key (keys %associations)
    {
        if ($associations{$key} eq "")
        {
            print "Warning: $key is not assigned...\n";
            $not_assigned .= "- $key\n";
        }
    }

    if ($not_assigned ne "")
    {
        my $rc = Wx::MessageBox(
                    "These libs are not associated\n\n$not_assigned\n\nDo you want to continue?",
                    "",
                    Wx::wxYES_NO | Wx::wxICON_WARNING);
        if ($rc == Wx::wxNO)
        {
            return;
        }
    }

    my $tmp_file = "associations.tmp";
    if (!open (OUT, ">$tmp_file"))
    {
        Wx::MessageBox("Can't open $tmp_file: $!");
        return;
    }

    foreach my $key (keys %associations)
    {
        print OUT "$key     $associations{$key}\n";
    }

    close(OUT);

    # Target associations file
    my $predefined_dir;
    if (!$self->predefined_non_mpc_compliant_lib_associations_dir(\$predefined_dir))
    {
        return;
    }

    $predefined_dir .= "/$self->{product_name}";
    unless (-d $predefined_dir)
    {
        if (!DPOUtils::make_path($predefined_dir))
        {
            Wx::MessageBox("Failed to create $predefined_dir");
            return;
        }
    }

    my $associations_file = "$predefined_dir/associations";

    my $ok = 1;
    if (!File::Copy::syscopy($tmp_file, $associations_file))
    {
        my $cwd = Cwd::getcwd();
        wx::MessageBox("Failed to copy $cwd/$tmp_file to $associations_file. Try to copy yourself.");
        $ok = 0;
    }

    if ($ok)
    {
        unlink($tmp_file);
    }

    return;

    # wxGlade: DPONonMPCLibAssociationDlg::on_button_save <event_handler>
    warn "Event handler (on_button_save) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPONonMPCLibAssociationDlg

1;

