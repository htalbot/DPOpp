use lib $ENV{DPO_CORE_ROOT} . "/scripts";

use Tie::IxHash; #preserving hash order

use DPOUtils;
use DPOEnvVars;
use DPOProduct;
use DPOProject;
use DPOProductExportFileDlg;
use DPOProductStaticDynamicChoiceDlg;
use DPOProductNewProjectsToIncludeInWorkspaceDlg;

# generated by wxGlade 0.6.8 on Sun Feb 22 08:23:15 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOProductNewProjectDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';

my $log_file = "\$(DPO_CORE_ROOT)";
DPOEnvVars::expand_env_var(\$log_file);
$log_file .= "/scripts/new_project.log";

sub new {
    my( $self, $panel_product, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductNewProjectDlg::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{text_ctrl_project_name} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{sizer_project_name_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Project name") );
    $self->{tree_ctrl_project_types} = Wx::TreeCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_DEFAULT_STYLE|wxSUNKEN_BORDER);
    $self->{list_ctrl_sub_projects} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_NO_HEADER|wxSUNKEN_BORDER);
    $self->{button_remove} = Wx::Button->new($self, wxID_ANY, _T("Remove"));
    $self->{sizer_39_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Sub projects") );
    $self->{sizer_project_types_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Project types") );
    $self->{text_ctrl_parent_directory} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{button_parent_directory_browse} = Wx::Button->new($self, wxID_ANY, _T("..."));
    $self->{sizer_parent_directory_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Parent directory") );
    $self->{button_create} = Wx::Button->new($self, wxID_ANY, _T("Create"));
    $self->{button_quit} = Wx::Button->new($self, wxID_ANY, _T("No more projects"));
    $self->{label_location_log} = Wx::StaticText->new($self, wxID_ANY, _T("label_1"), wxDefaultPosition, wxDefaultSize, );
    $self->{sizer_location_log_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("The location where the project is created is logged in") );

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button_remove}->GetId, \&on_button_remove);
    Wx::Event::EVT_BUTTON($self, $self->{button_parent_directory_browse}->GetId, \&on_button_browse);
    Wx::Event::EVT_BUTTON($self, $self->{button_create}->GetId, \&on_button_create);
    Wx::Event::EVT_BUTTON($self, $self->{button_quit}->GetId, \&on_button_quit);

    # end wxGlade

    $self->{panel_product} = $panel_product;
    $self->{project_name} = "";

    $self->{text_ctrl_parent_directory}->SetValue("$self->{panel_product}->{this_product}->{path}/projects");
    $self->get_available_templates();
    $self->fill_type();

    $self->{label_location_log}->SetLabel($log_file);

    $self->{project_created} = 0;

    $self->create_listctrl();

    $self->{sub_projects} = ();

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductNewProjectDlg::__set_properties
    $self->SetTitle(_T("New project"));
    $self->{tree_ctrl_project_types}->SetMinSize(Wx::Size->new(400, 200));
    $self->{button_remove}->SetToolTipString(_T("Select sub projects you don't want to keep and click 'Remove' to get rid of them."));
    $self->{label_location_log}->SetForegroundColour(Wx::Colour->new(0, 127, 255));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductNewProjectDlg::__do_layout
    $self->{sizer_top} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_location_log_staticbox}->Lower();
    $self->{sizer_location_log} = Wx::StaticBoxSizer->new($self->{sizer_location_log_staticbox}, wxHORIZONTAL);
    $self->{sizer_24} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_create} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_parent_directory_staticbox}->Lower();
    $self->{sizer_parent_directory} = Wx::StaticBoxSizer->new($self->{sizer_parent_directory_staticbox}, wxHORIZONTAL);
    $self->{sizer_project_types_staticbox}->Lower();
    $self->{sizer_project_types} = Wx::StaticBoxSizer->new($self->{sizer_project_types_staticbox}, wxHORIZONTAL);
    $self->{sizer_39_staticbox}->Lower();
    $self->{sizer_39} = Wx::StaticBoxSizer->new($self->{sizer_39_staticbox}, wxVERTICAL);
    $self->{sizer_project_name_staticbox}->Lower();
    $self->{sizer_project_name} = Wx::StaticBoxSizer->new($self->{sizer_project_name_staticbox}, wxHORIZONTAL);
    $self->{sizer_project_name}->Add($self->{text_ctrl_project_name}, 1, 0, 0);
    $self->{sizer_top}->Add($self->{sizer_project_name}, 0, wxEXPAND, 0);
    $self->{sizer_project_types}->Add($self->{tree_ctrl_project_types}, 2, wxEXPAND, 0);
    $self->{sizer_39}->Add($self->{list_ctrl_sub_projects}, 1, wxALL|wxEXPAND, 3);
    $self->{sizer_39}->Add($self->{button_remove}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 3);
    $self->{sizer_project_types}->Add($self->{sizer_39}, 1, wxEXPAND, 0);
    $self->{sizer_top}->Add($self->{sizer_project_types}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_parent_directory}->Add($self->{text_ctrl_parent_directory}, 1, 0, 0);
    $self->{sizer_parent_directory}->Add($self->{button_parent_directory_browse}, 0, wxLEFT, 3);
    $self->{sizer_top}->Add($self->{sizer_parent_directory}, 0, wxALL|wxEXPAND, 5);
    $self->{sizer_create}->Add($self->{button_create}, 0, 0, 0);
    $self->{sizer_top}->Add($self->{sizer_create}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_24}->Add($self->{button_quit}, 0, 0, 0);
    $self->{sizer_top}->Add($self->{sizer_24}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_location_log}->Add($self->{label_location_log}, 0, 0, 0);
    $self->{sizer_top}->Add($self->{sizer_location_log}, 0, wxALL|wxEXPAND, 5);
    $self->SetSizer($self->{sizer_top});
    $self->{sizer_top}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub get_available_templates
{
    my ($self) = @_;

    tie (my %templates, 'Tie::IxHash'); #preserve order;
    if (!DPOUtils::available_templates(\%templates))
    {
        Wx::MessageBox("Failed to get available templates.", "", Wx::wxOK | Wx::wxICON_ERROR);
    }
    else
    {
        $self->{templates} = \%templates;
    }
}

sub fill_type
{
    my ($self) = @_;

    my $root = $self->{tree_ctrl_project_types}->AddRoot("Project types");

    my @project_types=();

    foreach my $key (keys $self->{templates})
    {
        my @tokens = split(/:/, $key);
        append_item($root, \@tokens, $self->{tree_ctrl_project_types});
    }

    $self->{tree_ctrl_project_types}->Expand($root);
}

sub create_listctrl
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Sub project"); # dummy because there is no header
    #~ $col->SetWidth(150);
    $self->{list_ctrl_sub_projects}->InsertColumn(0, $col);
}

sub append_item
{
    my ($root, $tokens, $tree) = @_;

    my $parent = @$tokens[0];

    my $existing_child = undef;

    my ($child, $cookie) = $tree->GetFirstChild($root);
    while ($child && $child->IsOk())
    {
        my $item_text = $tree->GetItemText($child);

        if ($item_text eq $parent)
        {
            $existing_child = $child;
            last;
        }

        ($child, $cookie) = $tree->GetNextChild($root, $cookie);
    }

    if (defined($existing_child))
    {
        $root = $existing_child;
    }
    else
    {
        $root = $tree->AppendItem($root, $parent, $tree);
    }

    my $count = @$tokens;
    if ($count > 1)
    {
        shift @$tokens;
        append_item($root, $tokens, $tree);
    }
}

sub validate_inputs
{
    my ($self,
        $parent_dir,
        $project_name,
        $msg_ref) = @_;

    my $rc = 1;

    if (!DPOUtils::valid_input($parent_dir))
    {
        $$msg_ref .= "Invalid character in '$parent_dir' (parent dir)";
        return;
    }

    if (!DPOUtils::valid_input($project_name))
    {
        $$msg_ref .= "Invalid character in '$project_name' (project name)";
        return;
    }

    my $dpo_core_root = "\$(DPO_CORE_ROOT)";
    if (!DPOEnvVars::expand_env_var(\$dpo_core_root))
    {
        $$msg_ref .= "DPO_CORE_ROOT env. var. not defined";
        $rc=0;
    }

    if (!$project_name)
    {
        $$msg_ref .= "Project name not defined\n";
        $rc=0;
    }

    if (!$parent_dir)
    {
        $$msg_ref .= "Parent directory not defined\n";
        $rc=0;
    }

    return $rc;
}

sub get_project_type_from_selection
{
    my ($self, $project_type_ref, $msg_ref) = @_;

    my @tokens=();
    my $item = $self->{tree_ctrl_project_types}->GetSelection();
    if (!$item)
    {
        $$msg_ref .= "Project type not selected\n";
        return 0;
    }
    else
    {
        # process $item string to get project type
        while ($item && $item->IsOk())
        {
            my $item_text = $self->{tree_ctrl_project_types}->GetItemText($item);

            push(@tokens, $item_text);

            $item = $self->{tree_ctrl_project_types}->GetItemParent($item);
        }

        @tokens = reverse @tokens;

        foreach my $tok (@tokens[1..@tokens-1])
        {
            if ($$project_type_ref)
            {
                $$project_type_ref .= ":";
            }
            $$project_type_ref .= $tok;
        }

        if (!$$project_type_ref)
        {
            $$msg_ref .= "Bad project type.\n";
            return 0;
        }
    }

    return 1;
}

sub report_output
{
    my ($self, $parent_dir, $project_name, $project_type) = @_;

    my $msg = "Sometimes, we don't create the project where we think we do.\n" .
                "(When we make a mistake while selecting directory)\n" .
                "Then, we can consult the file $log_file.\n";

    if (!open (THE_FILE, ">>$log_file"))
    {
        $msg .= "\nUnfortunatly, $log_file can't be open.\n\n" .
                "The best we can do is to be aware of the directory where we created the project.\n\n" .
                "Remember that you created the project in $parent_dir.\n";
        Wx::MessageBox(
                $msg,
                "New project creation",
                Wx::wxOK | Wx::wxICON_WARNING,
                undef);
    }
    else
    {
        my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
        my $suffix = sprintf("%04d-%02d-%02d-%02d:%02d:%02d",
                            $year + 1900,
                            $mon + 1,
                            $mday,
                            $hour,
                            $min,
                            $sec);

        print THE_FILE "$suffix : $parent_dir/$project_name ($project_type)\n";

        close(THE_FILE);
    }
}

sub generate_export_file
{
    my ($self, $source, $project_name, $ace_required) = @_;

    $$ace_required = 0;

    my $dlg = DPOProductExportFileDlg->new(
                    undef,
                    -1,
                    "",
                    Wx::wxDefaultPosition,
                    Wx::wxDefaultSize,
                    Wx::wxDEFAULT_FRAME_STYLE|Wx::wxTAB_TRAVERSAL);

    $dlg->ShowModal();

    my $generate = 1;
    my $gen_export_cmd;

    my $upper_name = uc($project_name);

    if ($dlg->{radio_btn_mpc_ace}->GetValue())
    {
        $self->{ace_root} = "\$(ACE_ROOT)";
        if (!DPOEnvVars::expand_env_var(\$self->{ace_root}))
        {
            Wx::MessageBox("Can't generate export file (ACE_ROOT is not defined)", "", Wx::wxOK | Wx::wxICON_ERROR);
            return 0;
        }

        $gen_export_cmd = "$self->{ace_root}/bin/generate_export_file.pl ".
                            "$upper_name > $upper_name"."_Export.h";

        $$ace_required = 1;
    }
    else
    {
        if ($dlg->{radio_btn_mpc}->GetValue())
        {
            my $mpc_root = "\$(MPC_ROOT)";
            if (!DPOEnvVars::expand_env_var(\$mpc_root))
            {
                Wx::MessageBox("Can't generate export file (MPC_ROOT is not defined)", "", Wx::wxOK | Wx::wxICON_ERROR);
                return 0;
            }

            $gen_export_cmd = "$mpc_root/generate_export_header.pl ".
                                "$upper_name $upper_name"."_Export.h";
        }
    }

    $dlg->Destroy();

    if ($generate)
    {
        my $msg;

        if (!DPOUtils::gen_export_file($source,
                                        $project_name,
                                        $gen_export_cmd,
                                        \$msg))
        {
            Wx::MessageBox("Can't generate export file (ACE_ROOT/MPC_ROOT defined?): $msg.", "", Wx::wxOK | Wx::wxICON_ERROR);
            return 0;
        }
    }

    return 1;
}

sub add_ace_as_dependency
{
    my ($self, $project_dir) = @_;

    my $file = "$project_dir/DPOProject.xml";

    my $config = DPOProjectConfig->new($file);
    if ($config)
    {
        # Get project to update it.
        my $project;
        if ($config->get_project(\$project))
        {
            # Create a project relative to ACE

            my ($flavour, $ace_version) = $self->{ace_root} =~ /.*\/(.*)\/(\d+\.\d+\.\d+)/;

            my $dpo_compliant_value = 0;
            my $dpo_compliant_product_name = "ACE";
            my $dpo_compliant_product_flavour = $flavour;
            my $dpo_compliant_mpb = "acelib";

            my @mpc_related_includes;
            if (!DPOUtils::get_ace_related_mpc_includes(\@mpc_related_includes))
            {
                Wx::MessageBox("Can't get ACE related MPC includes", "", Wx::wxOK | Wx::wxICON_ERROR);
                return 0;
            }

            my $dpo_compliant_mpc_includes = "";
            my $first = 1;
            foreach my $inc (@mpc_related_includes)
            {
                if ($first)
                {
                    $first = 0;
                }
                else
                {
                    $dpo_compliant_mpc_includes .= ";";
                }

                $dpo_compliant_mpc_includes .= $inc;
            }

            my $dpo_compliant = DPOCompliant->new($dpo_compliant_value, $dpo_compliant_product_name, $dpo_compliant_product_flavour, $dpo_compliant_mpb, $dpo_compliant_mpc_includes);

            my $new_dependency = DPOProjectDependency->new("ACE", $ace_version, $ace_version, 8, $dpo_compliant);

            # Determine if the project can be used as static/dynamic
            my $product;
            if (!DPOProductConfig::get_product_with_name("ACE", \$product))
            {
                Wx::MessageBox("Can't load product ACE", "", Wx::wxOK | Wx::wxICON_ERROR);
                return 0;
            }

            my $type;
            if ($product->get_lib_type("ACE", \$type))
            {
                $new_dependency->{type} = $type;
            }
            else
            {
                Wx::MessageBox("Can't get lib type from acelib  (doesn't exist)", "", Wx::wxOK | Wx::wxICON_ERROR);
                return 0;
            }

            if ($type == 7)
            {
                my @libs_with_both_types;
                push(@libs_with_both_types, $new_dependency);
                my $dlg = DPOProductStaticDynamicChoiceDlg->new(
                                $project,
                                \@libs_with_both_types,
                                undef,
                                -1,
                                "",
                                Wx::wxDefaultPosition,
                                Wx::wxDefaultSize,
                                Wx::wxDEFAULT_FRAME_STYLE|Wx::wxTAB_TRAVERSAL);

                $dlg->ShowModal();

                $dlg->Destroy();
            }
            else
            {
                push(@{$project->{dependencies_when_dynamic}}, $new_dependency);
                push(@{$project->{dependencies_when_static}}, $new_dependency);
            }

            if (!$config->save($project))
            {
                Wx::MessageBox("Can't save $file for adding ACE as a dependency.", "", Wx::wxOK | Wx::wxICON_ERROR);
                return 0;
            }
        }
    }
    else
    {
        Wx::MessageBox("Can't load $file to add ACE as a dependency.", "", Wx::wxOK | Wx::wxICON_ERROR);
        return 0;
    }

    return 1;
}

sub get_sub_projects_env_vars
{
    my ($self, $path, $projects_env_vars_ref) = @_;

    my @content;
    if (DPOUtils::get_dir_content($path, \@content))
    {
        foreach my $x (@content)
        {
            my $complete = "$path/$x";
            if (-d $complete)
            {
                $complete =~ s/\\/\//g;
                if (-e "$complete/DPOProject.xml")
                {
                    my $env_var_id = uc($x) . "_PRJ_ROOT";
                    my $env_var_value = $complete;
                    $env_var_value =~ s/\\/\//g;
                    my $env_var = DPOEnvVar->new($env_var_id, $env_var_value);
                    push(@$projects_env_vars_ref, $env_var);

                    my $item = Wx::ListItem->new();

                    my $i = $self->{list_ctrl_sub_projects}->GetItemCount();
                    $item->SetId($i);
                    $item->SetText($x);
                    $self->{list_ctrl_sub_projects}->InsertItem( $item );
                    $self->{list_ctrl_sub_projects}->SetItemBackgroundColour($i, Wx::Colour->new(255, 255, 0));

                    $self->{sub_projects}->{$x} = $env_var_value;
                }

                $self->get_sub_projects_env_vars($complete, $projects_env_vars_ref);
            }
        }
    }
}


###### EEEEEEEEEvent handlers
sub on_button_browse
{
    my ($self, $event) = @_;

    my $projects_path = "$self->{panel_product}->{this_product}->{path}/projects";

    my $dlg = Wx::DirDialog->new($self,
                                "Select project directory (parent)",
                                $projects_path);
    my $rc = $dlg->ShowModal();
    if ($rc == Wx::wxID_OK)
    {
        my $new_path = $dlg->GetPath();
        $new_path =~ s/\\/\//g;
        if ($new_path !~ $projects_path)
        {
            Wx::MessageBox(
                    "The new project must be under $projects_path.",
                    "New project creation",
                    Wx::wxOK | Wx::wxICON_ERROR);
            return;
        }

        $self->{text_ctrl_parent_directory}->SetValue($new_path);
    }

    return;

    # wxGlade: DPOProductNewProjectDlg::on_button_browse <event_handler>
    warn "Event handler (on_button_browse) not implemented";
    $event->Skip;
    # end wxGlade
}

sub on_button_create
{
    my ($self, $event) = @_;

    my $projects_path = "$self->{panel_product}->{this_product}->{path}/projects";
    my $new_path = $self->{text_ctrl_parent_directory}->GetValue();
    $new_path =~ s/\\/\//g;
    if ($new_path !~ $projects_path)
    {
        Wx::MessageBox(
                "The new project must be under $projects_path.",
                "New project creation",
                Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    my $parent_dir;
    my $project_name;
    my $project_type_id;

    my @listEnvVarValues;


    my $busy = Wx::BusyCursor->new();

    my $msg="";

    $parent_dir = $self->{text_ctrl_parent_directory}->GetValue();
    $parent_dir =~ s/\\/\//;
    $project_name = $self->{text_ctrl_project_name}->GetValue();

    if (!$self->validate_inputs($parent_dir,
                                $project_name,
                                \$msg))
    {
        Wx::MessageBox(
                $msg,
                "New project creation",
                Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    # Get template from type selection for specific processing.
    if (!$self->get_project_type_from_selection(\$project_type_id, \$msg))
    {
        Wx::MessageBox(
                $msg,
                "New project creation",
                Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    my ($new_project_specifier) = $self->{templates}{$project_type_id} =~ /.*\/(.*)/;

    unshift(@INC, $self->{templates}{$project_type_id});

    my $pm_file = "NewProject" . "_$new_project_specifier";

    my $template;
    eval {
        require("$pm_file.pm");
        $template = $pm_file->new($parent_dir, $project_name, $self->{panel_product});
    } or do {
        my $error = $@;
        Wx::MessageBox(
                "$error\n\n".
                "Please define '$pm_file.pm' in $self->{templates}{$project_type_id}.",
                "Loading $pm_file.pm",
                Wx::wxOK | Wx::wxICON_ERROR);
        return;
    };

    @INC = grep { $_ !~ /$self->{templates}{$project_type_id}/ } @INC;

    # Validation for this template.
    if (!$template->validate(\$msg))
    {
        Wx::MessageBox(
                $msg,
                "$project_type_id validation",
                Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    my $project_type;
    if (!$template->get_right_project_type(
                        $self->{templates}{$project_type_id},
                        \$project_type))
    {
        Wx::MessageBox(
                $msg,
                "Template validation",
                Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    if (DPOUtils::create_new_project($parent_dir,
                                        $project_name,
                                        $project_type_id,
                                        $project_type,
                                        \$msg))
    {
        # Report output into $log_file
        $self->report_output($self->{text_ctrl_parent_directory}->GetValue(),
                                $self->{text_ctrl_project_name}->GetValue(),
                                $project_type_id);

        # Set env. vars.
        my $env_var_id = uc($project_name) . "_PRJ_ROOT";
        my $env_var_value = "$parent_dir/$project_name";
        my $env_var = DPOEnvVar->new($env_var_id, $env_var_value);

        push(@listEnvVarValues, $env_var);

        $self->{sub_projects} = ();
        my @sub_projects_env_vars;
        $self->get_sub_projects_env_vars("$parent_dir/$project_name", \@sub_projects_env_vars);
        @listEnvVarValues = (@listEnvVarValues, @sub_projects_env_vars);

        my $rc = DPOEnvVars::system_set_env_vars(\@listEnvVarValues);
        if (!$rc)
        {
            Wx::MessageBox(
                    "Can't set environment variable $env_var_id.",
                    "",
                    Wx::wxOK | Wx::wxICON_ERROR);
            return;
        }

        # Generate export file
        if ($project_type =~ /dll/)
        {
            my $ace_required;
            if ($self->generate_export_file("$parent_dir/$project_name", $project_name, \$ace_required))
            {
                if ($ace_required)
                {
                    if (!$self->add_ace_as_dependency("$parent_dir/$project_name"))
                    {
                        Wx::MessageBox(
                                "Adding ACE as dependency failure.",
                                "New project creation",
                                Wx::wxOK | Wx::wxICON_WARNING);
                        DPOUtils::remove_dir("$parent_dir/$project_name");
                        DPOEnvVars::system_del_env_vars(\@listEnvVarValues);
                        return;
                    }
                }
            }
            else
            {
                Wx::MessageBox(
                        "Project creation failure.\n\nMaybe, you want to remove the newly generated directory: $parent_dir/$project_name.",
                        "New project creation",
                        Wx::wxOK | Wx::wxICON_WARNING,
                        undef);
                DPOUtils::remove_dir("$parent_dir/$project_name");
                DPOEnvVars::system_del_env_vars(\@listEnvVarValues);
                return;
            }
        }

        # Set product name of the newly created project
        my $project;
        if (!$self->{panel_product}->get_project($project_name, \$project))
        {
            Wx::MessageBox("Can't get project $project_name.", "", Wx::wxOK | Wx::wxICON_ERROR);
            return;
        }
        $project->{dpo_compliant}->{product_name} = $self->{panel_product}->{this_product}->{name};
        if (!$self->{panel_product}->save_project($project))
        {
            Wx::MessageBox("Can't save project $project_name with new dpo_compliant product_name field ($self->{panel_product}->{this_product}->{name}).", "", Wx::wxOK | Wx::wxICON_ERROR);
            return;
        }

        if ($project->is_library()
            || $project->is_header_impl_or_abstract_class())
        {
            my $path ="$parent_dir/$project_name/test_$project_name";
            if (-e $path)
            {
                my $test_project;
                if ($self->{panel_product}->get_project("test_$project_name", \$test_project))
                {
                    $test_project->{dpo_compliant}->{product_name} = $self->{panel_product}->{this_product}->{name};
                    if (!$self->{panel_product}->save_project($test_project))
                    {
                        Wx::MessageBox("Can't save project test_$project_name with new dpo_compliant product_name field ($self->{panel_product}->{this_product}->{name}).\n", "", Wx::wxOK | Wx::wxICON_ERROR);
                        return;
                    }
                }
                else
                {
                    Wx::MessageBox("Can't get project test_$project_name.", "", Wx::wxOK | Wx::wxICON_ERROR);
                    return;
                }
            }
        }

        # Make additional actions according to the type of the project.
        my $msg;
        if (!$template->post_create($project, $self, \$msg))
        {
            Wx::MessageBox(
                    $msg,
                    "New project creation",
                    Wx::wxOK | Wx::wxICON_WARNING);
            DPOUtils::remove_dir("$parent_dir/$project_name");
            DPOEnvVars::system_del_env_vars(\@listEnvVarValues);
            return;
        }
    }
    else
    {
        Wx::MessageBox(
                $msg,
                "New project creation",
                Wx::wxOK | Wx::wxICON_WARNING);
        return;
    }


    # Update versions and type of the project (because they are set at default
    # values in template:
    #       version = 0.0.0
    #       type = static when project is static and dynamic when project is dynamic).
    my $project;
    if (!$self->{panel_product}->get_project($project_name, \$project))
    {
        Wx::MessageBox("Can't get project $project_name. Unable to update dependencies with the right version/type", "", Wx::wxOK | Wx::wxICON_ERROR);
        DPOUtils::remove_dir("$parent_dir/$project_name");
        DPOEnvVars::system_del_env_vars(\@listEnvVarValues);
        return;
    }

    my $wait = Wx::BusyCursor->new();

    if (!DPOUtils::update_deps_version_and_type($project, $project, $self->{panel_product}))
    {
        Wx::MessageBox(
                "Can't update version and types of dependencies for $project->{name}",
                "New project creation",
                Wx::wxOK | Wx::wxICON_ERROR);
        DPOUtils::remove_dir("$parent_dir/$project_name");
        DPOEnvVars::system_del_env_vars(\@listEnvVarValues);
        return;
    }

    # Include subprojects into the current workspace and their path into panel_product->{product_projects_paths}.
    my @sub_projects_names;
    if (DPOUtils::find_sub_projects("$parent_dir/$project_name", \@sub_projects_names))
    {
        my $dlg = DPOProductNewProjectsToIncludeInWorkspaceDlg->new(
                        $project_name,
                        \@sub_projects_names,
                        undef,
                        -1,
                        "",
                        Wx::wxDefaultPosition,
                        Wx::wxDefaultSize,
                        Wx::wxDEFAULT_FRAME_STYLE|Wx::wxTAB_TRAVERSAL);

        $dlg->ShowModal();

        foreach my $project_name (@{$dlg->{selected_projects_names}})
        {
            if (!List::MoreUtils::any {$_->{name} eq $project_name} @{$self->{panel_product}->{workspace_projects}})
            {
                my $proj;
                if ($self->{panel_product}->get_project($project_name, \$proj))
                {
                    push(@{$self->{panel_product}->{workspace_projects}}, $proj);
                }

                my $path = "\$(" . uc($project_name) . "_PRJ_ROOT)";
                if (DPOEnvVars::expand_env_var(\$path))
                {
                    if (!List::MoreUtils::any {$_ eq $path} @{$self->{panel_product}->{product_projects_paths}})
                    {
                        push(@{$self->{panel_product}->{product_projects_paths}}, $path);
                    }
                }
            }
            else
            {
                # Already included
            }
        }

        if (!$self->{panel_product}->save_workspace($self->{panel_product}->{workspace_projects}))
        {
            Wx::MessageBox("Can't save workspace.", "", Wx::wxOK | Wx::wxICON_ERROR);
            $dlg->Destroy();
            DPOUtils::remove_dir("$parent_dir/$project_name");
            DPOEnvVars::system_del_env_vars(\@listEnvVarValues);
            return;
        }
        $self->{panel_product}->fill_tree_workspace();

        $dlg->Destroy();
    }


    # Created
    $self->{project_created} = 1;

    $self->{project_name} = $project_name;
    $self->{parent_dir} = $parent_dir;

    $self->{button_quit}->SetFocus();

    $self->{tree_ctrl_project_types}->Unselect();

    return;

    # wxGlade: DPOProductNewProjectDlg::on_button_create <event_handler>
    warn "Event handler (on_button_create) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_quit
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductNewProjectDlg::on_button_quit <event_handler>
    warn "Event handler (on_button_quit) not implemented";
    $event->Skip;
    # end wxGlade
}



sub on_button_remove
{
    my ($self, $event) = @_;

    my $wait = Wx::BusyCursor->new();

    my $list_ctrl = $self->{list_ctrl_sub_projects};

    my $parent_dir = $self->{text_ctrl_parent_directory}->GetValue();
    my $project_name = $self->{text_ctrl_project_name}->GetValue();

    my @paths_to_remove;
    my @env_vars_to_remove;
    my @sub_project_names;
    my $i = -1;
    for ( ;; )
    {
        $i = $list_ctrl->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $sub_project_name = $list_ctrl->GetItemText($i);
        push(@sub_project_names, $sub_project_name);

        my $path_to_remove = $self->{sub_projects}->{$sub_project_name};

        my $env_var_id = uc($sub_project_name) . "_PRJ_ROOT";
        my $env_var_value = $path_to_remove;
        $env_var_value =~ s/\\/\//g;
        my $env_var = DPOEnvVar->new($env_var_id, $env_var_value);
        push(@env_vars_to_remove, $env_var);

        push(@paths_to_remove, $path_to_remove);
    }

    if (scalar(@env_vars_to_remove) != 0)
    {
        my $rc = Wx::MessageBox(
                    "You are removing sub projects.\n\n".
                    "Do you really want to remove them ?",
                    "Removing sub projects",
                    Wx::wxYES_NO | Wx::wxICON_QUESTION);

        if ($rc == Wx::wxNO)
        {
            return;
        }

        $rc = DPOEnvVars::system_del_env_vars(\@env_vars_to_remove);

        if (!$rc)
        {
            Wx::MessageBox(
                    "Can't del environment variables.",
                    "",
                    Wx::wxOK | Wx::wxICON_ERROR);
            return;
        }

        # Remove paths
        foreach my $x (@paths_to_remove)
        {
            DPOUtils::remove_dir($x);
        }

        $self->{list_ctrl_sub_projects}->DeleteAllItems();

        # Remove from loaded_projects
        foreach my $x (@sub_project_names)
        {
            @{$self->{panel_product}->{loaded_projects}} = grep { $_->{name} ne $x } @{$self->{panel_product}->{loaded_projects}};
        }
    }
    else
    {
        Wx::MessageBox("No selection.");
    }

    return;

    # wxGlade: DPOProductNewProjectDlg::on_button_remove <event_handler>
    warn "Event handler (on_button_remove) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPOProductNewProjectDlg

1;

