# generated by wxGlade 0.6.8 on Mon Apr 20 13:33:36 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

use DPOProductNonProductMPBChoiceDlg;

package DPOProductNonProductMPBDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $non_compliant_lib_seq, $mpbs_to_use, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductNonProductMPBDlg::new
    $style = wxDEFAULT_DIALOG_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{list_ctrl_mpbs} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{button_use_selected_mpb} = Wx::Button->new($self, wxID_ANY, _T("Use selected libs"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button_use_selected_mpb}->GetId, \&on_button_use_selected_mpbs);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{non_compliant_lib_seq} = $non_compliant_lib_seq;
    $self->{mpbs_to_use} = $mpbs_to_use;

    $self->create_list_ctrls();

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductNonProductMPBDlg::__set_properties
    $self->SetTitle(_T("Non product mpb"));
    $self->{list_ctrl_mpbs}->SetMinSize(Wx::Size->new(1250, 300));
    # end wxGlade

    $self->{list_ctrl_mpbs}->SetMinSize(Wx::Size->new(1000, 300));
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductNonProductMPBDlg::__do_layout
    $self->{sizer_37} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_38} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_37}->Add($self->{list_ctrl_mpbs}, 1, wxEXPAND, 0);
    $self->{sizer_38}->Add($self->{button_use_selected_mpb}, 0, 0, 0);
    $self->{sizer_38}->Add($self->{button_cancel}, 0, wxLEFT, 5);
    $self->{sizer_37}->Add($self->{sizer_38}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_37});
    $self->{sizer_37}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrls
{
    my ($self) = @_;

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Lib id");
    $col->SetWidth(150);
    $self->{list_ctrl_mpbs}->InsertColumn(0, $col);

    $col = Wx::ListItem->new();
    $col->SetId(1);
    $col->SetText("Dynamic/Debug");
    $col->SetWidth(150);
    $self->{list_ctrl_mpbs}->InsertColumn(1, $col);

    $col = Wx::ListItem->new();
    $col->SetId(2);
    $col->SetText("Dynamic/Release");
    $col->SetWidth(150);
    $self->{list_ctrl_mpbs}->InsertColumn(2, $col);

    $col = Wx::ListItem->new();
    $col->SetId(3);
    $col->SetText("Static/Debug");
    $col->SetWidth(150);
    $self->{list_ctrl_mpbs}->InsertColumn(3, $col);

    $col = Wx::ListItem->new();
    $col->SetId(4);
    $col->SetText("Static/Release");
    $col->SetWidth(150);
    $self->{list_ctrl_mpbs}->InsertColumn(4, $col);

    $col = Wx::ListItem->new();
    $col->SetId(5);
    $col->SetText("MPB");
    $col->SetWidth(150);
    $self->{list_ctrl_mpbs}->InsertColumn(5, $col);

    foreach my $x (sort {$a->{mpb_name} cmp $b->{mpb_name}} @{$self->{non_compliant_lib_seq}})
    {
        my $item = Wx::ListItem->new();
        $item->SetId($self->{list_ctrl_mpbs}->GetItemCount());
        $item->SetText($x->{lib_id});
        $self->{list_ctrl_mpbs}->InsertItem($item);
        $self->{list_ctrl_mpbs}->SetItem($self->{list_ctrl_mpbs}->GetItemCount() - 1, 1, $x->{dynamic_debug_lib});
        $self->{list_ctrl_mpbs}->SetItem($self->{list_ctrl_mpbs}->GetItemCount() - 1, 2, $x->{dynamic_release_lib});
        $self->{list_ctrl_mpbs}->SetItem($self->{list_ctrl_mpbs}->GetItemCount() - 1, 3, $x->{static_debug_lib});
        $self->{list_ctrl_mpbs}->SetItem($self->{list_ctrl_mpbs}->GetItemCount() - 1, 4, $x->{static_release_lib});
        $self->{list_ctrl_mpbs}->SetItem($self->{list_ctrl_mpbs}->GetItemCount() - 1, 5, $x->{mpb_name});
    }
}

###### EEEEEEEEEEEvent handler
sub on_button_use_selected_mpbs
{
    my ($self, $event) = @_;

    if ($self->{list_ctrl_mpbs}->GetSelectedItemCount() == 0)
    {
        Wx::MessageBox("No selection.");
        return;
    }

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_mpbs}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $lib_id = $self->{list_ctrl_mpbs}->GetItemText($i);
        my $item = $self->{list_ctrl_mpbs}->GetItem($i, 5);
        my $mpb = $item->GetText();

        my @mpbs = split(/;/, $mpb);
        if (scalar(@mpbs) > 1)
        {
            my $dlg = DPOProductNonProductMPBChoiceDlg->new(
                $lib_id,
                \@mpbs,
                undef,
                -1,
                "",
                Wx::wxDefaultPosition,
                Wx::wxDefaultSize,
                Wx::wxDEFAULT_FRAME_STYLE|Wx::wxTAB_TRAVERSAL);

            if ($dlg->ShowModal() == Wx::wxID_CANCEL)
            {
                $self->EndModal(Wx::wxID_CANCEL);
                $dlg->Destroy();
                return;
            }
            else
            {
                push(@{$self->{mpbs_to_use}}, $dlg->{selected_mpb});
            }

            $dlg->Destroy();
        }
        else
        {
            push(@{$self->{mpbs_to_use}}, $mpb);
        }
    }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductNonProductMPBDlg::on_button_use_selected_mpbs <event_handler>
    warn "Event handler (on_button_use_selected_mpbs) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductNonProductMPBDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class DPOProductNonProductMPBDlg

1;

