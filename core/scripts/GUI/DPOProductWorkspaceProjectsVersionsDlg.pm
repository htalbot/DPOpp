# generated by wxGlade 0.6.8 on Wed Jun 17 13:11:40 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
use Wx::Grid;
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package ProjectToChange;

sub new
{
    my ($class,
        $project_name,
        $new_target_version) = @_;

    my $self =
    {
        project_name => $project_name,
        new_target_version => $new_target_version
    };

    bless($self, $class);

    return $self;
}


1;

package DPOProductWorkspaceProjectsVersionsDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';

use DPOProductVersionDlg;


sub new {
    my( $self, $frame, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductWorkspaceProjectsVersionsDlg::new
    $style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{grid_1} = Wx::Grid->new($self, wxID_ANY);
    $self->{button_select_all} = Wx::Button->new($self, wxID_ANY, _T("Select all"));
    $self->{button_unselect_all} = Wx::Button->new($self, wxID_ANY, _T("Unselect all"));
    $self->{button_major_minus} = Wx::Button->new($self, wxID_ANY, _T("major -"));
    $self->{button_major_plus} = Wx::Button->new($self, wxID_ANY, _T("major +"));
    $self->{button_minor_minus} = Wx::Button->new($self, wxID_ANY, _T("minor -"));
    $self->{button_2} = Wx::Button->new($self, wxID_ANY, _T("minor +"));
    $self->{button_1} = Wx::Button->new($self, wxID_ANY, _T("patch -"));
    $self->{button_patch} = Wx::Button->new($self, wxID_ANY, _T("patch +"));
    $self->{button_this_version} = Wx::Button->new($self, wxID_ANY, _T("This version..."));
    $self->{sizer_68_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Actions on selection") );
    $self->{button_apply} = Wx::Button->new($self, wxID_ANY, _T("Apply"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_GRID_CMD_SELECT_CELL($self, $self->{grid_1}->GetId, \&on_grid_select_cell);
    Wx::Event::EVT_GRID_CMD_RANGE_SELECT($self, $self->{grid_1}->GetId, \&on_grid_range_select);
    Wx::Event::EVT_BUTTON($self, $self->{button_select_all}->GetId, \&on_button_select_all);
    Wx::Event::EVT_BUTTON($self, $self->{button_unselect_all}->GetId, \&on_button_unselect_all);
    Wx::Event::EVT_BUTTON($self, $self->{button_major_minus}->GetId, \&on_button_major_minus);
    Wx::Event::EVT_BUTTON($self, $self->{button_major_plus}->GetId, \&on_button_major_plus);
    Wx::Event::EVT_BUTTON($self, $self->{button_minor_minus}->GetId, \&on_button_minor_minus);
    Wx::Event::EVT_BUTTON($self, $self->{button_2}->GetId, \&on_button_minor_plus);
    Wx::Event::EVT_BUTTON($self, $self->{button_1}->GetId, \&on_button_patch_minus);
    Wx::Event::EVT_BUTTON($self, $self->{button_patch}->GetId, \&on_button_patch_plus);
    Wx::Event::EVT_BUTTON($self, $self->{button_this_version}->GetId, \&on_button_this_version);
    Wx::Event::EVT_BUTTON($self, $self->{button_apply}->GetId, \&on_button_apply);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{frame} = $frame;
    $self->{projects_to_change} = [];

    $self->create_grid();

    #~ $self->{text_ctrl_new_entry}->Enable(0);

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductWorkspaceProjectsVersionsDlg::__set_properties
    $self->SetTitle(_T("Workspace projects versions"));
    $self->{grid_1}->CreateGrid(10, 4);
    $self->{grid_1}->SetRowLabelSize(0);
    $self->{grid_1}->EnableDragRowSize(0);
    $self->{grid_1}->SetSelectionMode(wxGridSelectRows);
    $self->{grid_1}->SetColLabelValue(0, _T("Project"));
    $self->{grid_1}->SetColLabelValue(1, _T("Version"));
    $self->{grid_1}->SetColLabelValue(2, _T("Target version"));
    $self->{grid_1}->SetColSize(2, 100);
    $self->{grid_1}->SetColLabelValue(3, _T("New target version"));
    $self->{grid_1}->SetColSize(3, 120);
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductWorkspaceProjectsVersionsDlg::__do_layout
    $self->{sizer_top} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_61} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_60} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_91} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_68_staticbox}->Lower();
    $self->{sizer_68} = Wx::StaticBoxSizer->new($self->{sizer_68_staticbox}, wxVERTICAL);
    $self->{sizer_76} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_69} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_62} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_78} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_92} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_60}->Add($self->{grid_1}, 1, wxEXPAND, 0);
    $self->{sizer_92}->Add($self->{button_select_all}, 0, wxALL, 3);
    $self->{sizer_92}->Add($self->{button_unselect_all}, 0, wxALL, 3);
    $self->{sizer_91}->Add($self->{sizer_92}, 1, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_78}->Add($self->{button_major_minus}, 0, wxALL, 3);
    $self->{sizer_78}->Add($self->{button_major_plus}, 0, wxALL, 3);
    $self->{sizer_68}->Add($self->{sizer_78}, 0, wxEXPAND, 0);
    $self->{sizer_62}->Add($self->{button_minor_minus}, 0, wxALL, 3);
    $self->{sizer_62}->Add($self->{button_2}, 0, wxALL, 3);
    $self->{sizer_68}->Add($self->{sizer_62}, 0, wxEXPAND, 0);
    $self->{sizer_69}->Add($self->{button_1}, 0, wxALL, 3);
    $self->{sizer_69}->Add($self->{button_patch}, 0, wxALL, 3);
    $self->{sizer_68}->Add($self->{sizer_69}, 0, wxEXPAND, 0);
    $self->{sizer_76}->Add($self->{button_this_version}, 0, 0, 0);
    $self->{sizer_68}->Add($self->{sizer_76}, 0, wxTOP|wxALIGN_CENTER_HORIZONTAL, 10);
    $self->{sizer_91}->Add($self->{sizer_68}, 0, wxTOP|wxALIGN_BOTTOM|wxALIGN_CENTER_HORIZONTAL, 10);
    $self->{sizer_60}->Add($self->{sizer_91}, 0, wxALIGN_CENTER_VERTICAL, 0);
    $self->{sizer_top}->Add($self->{sizer_60}, 1, wxALL|wxEXPAND, 5);
    $self->{sizer_61}->Add($self->{button_apply}, 0, 0, 0);
    $self->{sizer_61}->Add($self->{button_cancel}, 0, wxLEFT, 5);
    $self->{sizer_top}->Add($self->{sizer_61}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_top});
    $self->{sizer_top}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub create_grid
{
    my ($self) = @_;

    $self->{grid_1}->DeleteRows(0, $self->{grid_1}->GetNumberRows());

    $self->{append_rows} = 1;
    $self->{grid_1}->AppendRows(scalar(@{$self->{frame}->{workspace_projects}}));

    my $read_only_colour = Wx::Colour->new(200, 200, 200);

    my $i = 0;
    foreach my $project (@{$self->{frame}->{workspace_projects}})
    {
        $self->{grid_1}->SetReadOnly($i, 0);
        $self->{grid_1}->SetReadOnly($i, 1);
        $self->{grid_1}->SetReadOnly($i, 2);

        $self->{grid_1}->SetCellBackgroundColour($i, 0, $read_only_colour);
        $self->{grid_1}->SetCellBackgroundColour($i, 1, $read_only_colour);
        $self->{grid_1}->SetCellBackgroundColour($i, 2, $read_only_colour);

        $self->{grid_1}->SetCellValue($i, 0, $project->{name});
        $self->{grid_1}->SetCellValue($i, 1, $project->{version});
        $self->{grid_1}->SetCellValue($i, 2, $project->{target_version});
        $self->{grid_1}->SetCellValue($i, 3, $project->{target_version});
        $i++;
    }

    #~ $self->{grid_1}->HideRowLabels();
}

sub get_the_most_recent_version
{
    my ($self, $col, $version_ref) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    my $max_major = 0;
    my $max_minor = 0;
    my $max_patch = 0;

    $$version_ref = "$max_major.$max_minor.$max_patch";

    my $found = 0;
    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my $entry = $self->{grid_1}->GetCellValue($i, $col);

            my ($maj, $min, $pat) = $entry =~ /(\d+)\.(\d+)\.(\d+)$/;
            my $current = "$maj.$min.$pat";

            if ($maj > $max_major)
            {
                $max_major = $maj;
                $$version_ref = $current;
            }
            else
            {
                if ($min > $max_minor)
                {
                    $max_minor = $min;
                    $$version_ref = $current;
                }
                else
                {
                    if ($pat > $max_patch)
                    {
                        $max_patch = $pat;
                        $$version_ref = $current;
                    }
                }
            }

            $found = 1;
        }
    }

    if (!$found)
    {
        return;
    }
}

# eeeeeeeeeeeeeeeeevent handlers
sub on_button_apply
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    $self->{projects_to_change} = [];

    my $selection = 0;

    for (my $i = 0; $i != $rows; $i++)
    {
        my $project_name = $self->{grid_1}->GetCellValue($i, 0);
        my $target_version = $self->{grid_1}->GetCellValue($i, 2);
        my $new_target_version = $self->{grid_1}->GetCellValue($i, 3);

        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my $project_to_change = ProjectToChange->new($project_name, $new_target_version);
            push(@{$self->{projects_to_change}}, $project_to_change);
            $selection = 1;
        }
    }

    if (!$selection)
    {
        Wx::MessageBox("No selection.");
        return;
    }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_apply <event_handler>
    warn "Event handler (on_button_apply) not implemented";
    $event->Skip;
    # end wxGlade
}

sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}

sub on_button_major_plus
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my ($major, $minor, $patch) = $self->{grid_1}->GetCellValue($i, 3) =~ /(\d+)\.(\d+)\.(\d+)/;
            my $new_major = $major+ 1;
            $self->{grid_1}->SetCellValue($i, 3, "$new_major.$minor.$patch");
        }
    }

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_major_plus <event_handler>
    warn "Event handler (on_button_major_plus) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_major_minus
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my ($major0, $minor0, $patch0) = $self->{grid_1}->GetCellValue($i, 1) =~ /(\d+)\.(\d+)\.(\d+)/;
            my ($major, $minor, $patch) = $self->{grid_1}->GetCellValue($i, 3) =~ /(\d+)\.(\d+)\.(\d+)/;
            my $new_major = $major;
            if ($major > 0
                && $major > $major0)
            {
                $new_major--;
            }
            $self->{grid_1}->SetCellValue($i, 3, "$new_major.$minor.$patch");
        }
    }

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_major_minus <event_handler>
    warn "Event handler (on_button_major_minus) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_minor_plus
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my ($major, $minor, $patch) = $self->{grid_1}->GetCellValue($i, 3) =~ /(\d+)\.(\d+)\.(\d+)/;
            my $new_minor = $minor + 1;
            $self->{grid_1}->SetCellValue($i, 3, "$major.$new_minor.$patch");
        }
    }

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_minor_plus <event_handler>
    warn "Event handler (on_button_minor_plus) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_minor_minus
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my ($major0, $minor0, $patch0) = $self->{grid_1}->GetCellValue($i, 1) =~ /(\d+)\.(\d+)\.(\d+)/;
            my ($major, $minor, $patch) = $self->{grid_1}->GetCellValue($i, 3) =~ /(\d+)\.(\d+)\.(\d+)/;
            my $new_minor = $minor;
            if ($minor > 0
                && $minor > $minor0)
            {
                $new_minor--;
            }
            $self->{grid_1}->SetCellValue($i, 3, "$major.$new_minor.$patch");
        }
    }

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_minor_minus <event_handler>
    warn "Event handler (on_button_minor_minus) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_patch_plus
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my ($major, $minor, $patch) = $self->{grid_1}->GetCellValue($i, 3) =~ /(\d+)\.(\d+)\.(\d+)/;
            my $new_patch = $patch + 1;
            $self->{grid_1}->SetCellValue($i, 3, "$major.$minor.$new_patch");
        }
    }

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_patch_plus <event_handler>
    warn "Event handler (on_button_patch_plus) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_patch_minus
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            my ($major0, $minor0, $patch0) = $self->{grid_1}->GetCellValue($i, 1) =~ /(\d+)\.(\d+)\.(\d+)/;
            my ($major, $minor, $patch) = $self->{grid_1}->GetCellValue($i, 3) =~ /(\d+)\.(\d+)\.(\d+)/;
            my $new_patch = $patch;
            if ($patch > 0
                && $patch > $patch0)
            {
                $new_patch--;
            }
            $self->{grid_1}->SetCellValue($i, 3, "$major.$minor.$new_patch");
        }
    }

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_patch_minus <event_handler>
    warn "Event handler (on_button_patch_minus) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_grid_select_cell
{
    my ($self, $event) = @_;

    my $row = $event->GetRow();
    my $col = $event->GetCol();

    if (defined($self->{append_rows}) && $self->{append_rows} == 1)
    {
        $self->{append_rows} = 0;   # To avoid the call to DPOProductVersionDlg
                                    # on creation (on call to AppendRows)
        return;
    }

    if ($col == 3)
    {
        my $version = $self->{grid_1}->GetCellValue($row, 1);
        my $target_version = $self->{grid_1}->GetCellValue($row, 2);
        my $new_target_version = $self->{grid_1}->GetCellValue($row, 3);

        my $dlg = DPOProductVersionDlg->new(
                        $new_target_version,
                        $new_target_version,
                        undef,
                        -1,
                        "",
                        Wx::wxDefaultPosition,
                        Wx::wxDefaultSize,
                        Wx::wxDEFAULT_FRAME_STYLE|Wx::wxTAB_TRAVERSAL);

        if ($dlg->ShowModal() == Wx::wxID_OK)
        {
            my $new_new_target_version = $dlg->{text_ctrl_new_version}->GetValue();

            my ($major,
                $minor,
                $patch) = $new_new_target_version =~ /(\d+)\.(\d+)\.(\d+)/;

            my ($prev_major,
                $prev_minor,
                $prev_patch) = $version =~ /(\d+)\.(\d+)\.(\d+)/;

            if ($patch < $prev_patch)
            {
                if ($minor <= $prev_minor)
                {
                    if ($major <= $prev_major)
                    {
                        my $msg = "New version ($new_new_target_version) can't be smaller than the current version ($version).";
                        Wx::MessageBox($msg, "", Wx::wxOK | Wx::wxICON_ERROR);
                        $dlg->Destroy();
                        return;
                    }
                }
            }

            $self->{grid_1}->SetCellValue($row, 3, $new_new_target_version);
        }

        $self->{grid_1}->SelectBlock($row, 0, $row, 3, 0);

        $dlg->Destroy();

        return;
    }

    #~ $self->{text_ctrl_new_entry}->ChangeValue($self->{grid_1}->GetCellValue($row, 3));
    #~ $self->{text_ctrl_new_entry}->Enable(1);

    $event->Skip;

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_grid_select_cell <event_handler>
    warn "Event handler (on_grid_select_cell) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_grid_range_select
{
    my ($self, $event) = @_;

    # Get the most recent version

    my $version;

    $self->get_the_most_recent_version(2, \$version);

    #~ $self->{text_ctrl_new_entry}->ChangeValue($version);

    $event->Skip;

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_grid_range_select <event_handler>
    warn "Event handler (on_grid_range_select) not implemented";
    $event->Skip;
    # end wxGlade
}

sub on_button_this_version
{
    my ($self, $event) = @_;

    my $rows = $self->{grid_1}->GetNumberRows();

    $self->{projects_to_change} = [];

    my $selection = 0;

    for (my $i = 0; $i != $rows; $i++)
    {
        if ($self->{grid_1}->IsInSelection($i, 0))
        {
            $selection = 1;
        }
    }

    if (!$selection)
    {
        Wx::MessageBox("No selection.");
        return;
    }

    my $the_most_recent_current_version;
    $self->get_the_most_recent_version(1, \$the_most_recent_current_version);

    my $the_most_recent_target_version;
    $self->get_the_most_recent_version(2, \$the_most_recent_target_version);

    my $initial_version = $the_most_recent_current_version;
    if ($the_most_recent_target_version gt $the_most_recent_current_version)
    {
        $initial_version = $the_most_recent_target_version;
    }

    my $entry = $the_most_recent_target_version;

    my $dlg = DPOProductVersionDlg->new(
                    $entry,
                    $entry,
                    undef,
                    -1,
                    "",
                    Wx::wxDefaultPosition,
                    Wx::wxDefaultSize,
                    Wx::wxDEFAULT_FRAME_STYLE|Wx::wxTAB_TRAVERSAL);

    if ($dlg->ShowModal() == Wx::wxID_OK)
    {
        my $new_entry = $dlg->{text_ctrl_new_version}->GetValue();

        my ($major,
            $minor,
            $patch) = $new_entry =~ /(\d+)\.(\d+)\.(\d+)/;

        my ($prev_major,
            $prev_minor,
            $prev_patch) = $the_most_recent_current_version =~ /(\d+)\.(\d+)\.(\d+)/;

        if ($patch < $prev_patch)
        {
            if ($minor <= $prev_minor)
            {
                if ($major <= $prev_major)
                {
                    my $msg = "New version ($new_entry) can't be smaller than the current version ($the_most_recent_current_version).";
                    Wx::MessageBox($msg, "", Wx::wxOK | Wx::wxICON_ERROR);
                    $dlg->Destroy();
                    return;
                }
            }
        }

        my $rows = $self->{grid_1}->GetNumberRows();

        for (my $i = 0; $i != $rows; $i++)
        {
            if ($self->{grid_1}->IsInSelection($i, 0))
            {
                $self->{grid_1}->SetCellValue($i, 3, $dlg->{text_ctrl_new_version}->GetValue());
            }
        }
    }

    $dlg->Destroy();

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_this_version <event_handler>
    warn "Event handler (on_button_this_version) not implemented";
    $event->Skip;
    # end wxGlade
}




sub on_button_select_all
{
    my ($self, $event) = @_;

    $self->{grid_1}->SelectAll();

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_select_all <event_handler>
    warn "Event handler (on_button_select_all) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_unselect_all
{
    my ($self, $event) = @_;

    $self->{grid_1}->ClearSelection();

    return;

    # wxGlade: DPOProductWorkspaceProjectsVersionsDlg::on_button_unselect_all <event_handler>
    warn "Event handler (on_button_unselect_all) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class DPOProductWorkspaceProjectsVersionsDlg

1;

