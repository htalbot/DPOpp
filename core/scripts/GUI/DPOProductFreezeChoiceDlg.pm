# generated by wxGlade 0.6.8 on Fri Aug 21 08:36:51 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

package ListCtrlElement;

sub new
{
    my ($class,
        $status,
        $text) = @_;

    my $self =
    {
        status => $status,
        text => $text
    };

    bless($self, $class);

    return $self;
}


1;

use Wx 0.15 qw[:allclasses];
use strict;

package DPOProductFreezeChoiceDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';

use constant
{
    STASH => 0,
    UNSTASH => 1
};

sub new {
    my( $self, $projects_to_freeze_ref, $last_product_version_block_ref, $frame, $versions_log, $current_version, $new_product_version, $new_product_flavour, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductFreezeChoiceDlg::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{text_ctrl_product_name} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_89_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Product name") );
    $self->{text_ctrl_product_flavour} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_129_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Flavour") );
    $self->{text_ctrl_product_version} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_86_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Version") );
    $self->{text_ctrl_product_new_flavour} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_90_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("New flavour") );
    $self->{text_ctrl_product_new_version} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_87_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("New version") );
    $self->{list_ctrl_projects} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    $self->{button_ok} = Wx::Button->new($self, wxID_ANY, _T("Ok"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_LIST_ITEM_RIGHT_CLICK($self, $self->{list_ctrl_projects}->GetId, \&on_list_ctrl_item_right_click);
    Wx::Event::EVT_BUTTON($self, $self->{button_ok}->GetId, \&on_button_ok);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    Wx::Event::EVT_MENU($self, STASH, \&on_stash);
    Wx::Event::EVT_MENU($self, UNSTASH, \&on_unstash);

    $self->{frame} = $frame;
    $self->{versions_log} = $versions_log;

    $self->{projects_to_freeze_ref} = $projects_to_freeze_ref;
    $self->{last_product_version_block_ref} = $last_product_version_block_ref;

    $self->{text_ctrl_product_name}->SetValue($self->{frame}->{this_product}->{name});
    $self->{text_ctrl_product_flavour}->SetValue($self->{frame}->{this_product}->{flavour});
    $self->{text_ctrl_product_version}->SetValue($current_version);
    $self->{text_ctrl_product_new_version}->SetValue($new_product_version);
    $self->{text_ctrl_product_new_flavour}->SetValue($new_product_flavour);

    $self->create_list_ctrl();

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductFreezeChoiceDlg::__set_properties
    $self->SetTitle(_T("Preparing product"));
    $self->{text_ctrl_product_version}->SetMinSize(Wx::Size->new(150, -1));
    $self->{text_ctrl_product_new_version}->SetMinSize(Wx::Size->new(150, -1));
    $self->{list_ctrl_projects}->SetMinSize(Wx::Size->new(700, 300));
    $self->{list_ctrl_projects}->SetToolTipString(_T("Riight click to stash/unstash a project"));
    # end wxGlade

    $self->{list_ctrl_projects}->SetMinSize(Wx::Size->new(500, 300));
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductFreezeChoiceDlg::__do_layout
    $self->{sizer_83} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_84} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_85} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_87_staticbox}->Lower();
    $self->{sizer_87} = Wx::StaticBoxSizer->new($self->{sizer_87_staticbox}, wxHORIZONTAL);
    $self->{sizer_90_staticbox}->Lower();
    $self->{sizer_90} = Wx::StaticBoxSizer->new($self->{sizer_90_staticbox}, wxHORIZONTAL);
    $self->{sizer_86_staticbox}->Lower();
    $self->{sizer_86} = Wx::StaticBoxSizer->new($self->{sizer_86_staticbox}, wxHORIZONTAL);
    $self->{sizer_129_staticbox}->Lower();
    $self->{sizer_129} = Wx::StaticBoxSizer->new($self->{sizer_129_staticbox}, wxHORIZONTAL);
    $self->{sizer_89_staticbox}->Lower();
    $self->{sizer_89} = Wx::StaticBoxSizer->new($self->{sizer_89_staticbox}, wxHORIZONTAL);
    $self->{sizer_89}->Add($self->{text_ctrl_product_name}, 1, 0, 0);
    $self->{sizer_85}->Add($self->{sizer_89}, 1, wxALL, 5);
    $self->{sizer_129}->Add($self->{text_ctrl_product_flavour}, 1, 0, 0);
    $self->{sizer_85}->Add($self->{sizer_129}, 1, wxALL, 5);
    $self->{sizer_86}->Add($self->{text_ctrl_product_version}, 1, 0, 0);
    $self->{sizer_85}->Add($self->{sizer_86}, 1, wxALL, 5);
    $self->{sizer_90}->Add($self->{text_ctrl_product_new_flavour}, 1, 0, 0);
    $self->{sizer_85}->Add($self->{sizer_90}, 1, wxALL, 5);
    $self->{sizer_87}->Add($self->{text_ctrl_product_new_version}, 1, 0, 0);
    $self->{sizer_85}->Add($self->{sizer_87}, 1, wxALL, 5);
    $self->{sizer_83}->Add($self->{sizer_85}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_83}->Add($self->{list_ctrl_projects}, 1, wxEXPAND, 0);
    $self->{sizer_84}->Add($self->{button_ok}, 0, wxALL, 5);
    $self->{sizer_84}->Add($self->{button_cancel}, 0, wxALL, 5);
    $self->{sizer_83}->Add($self->{sizer_84}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_83});
    $self->{sizer_83}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub create_list_ctrl
{
    my ($self) = @_;

    my $found_status = "";
    my $found_project_name = "";
    my $found_project_name_new = "";
    my $found_project_version = "";
    my $found_project_version_new = "";
    my $found_line_ref = 0;

    # Determine projects not frozen yet.
    my @projects_not_found;

    foreach my $proj (@{$self->{projects_to_freeze_ref}})
    {
        my $found = 0;

        foreach my $line (@{$self->{last_product_version_block_ref}})
        {
            if ($line =~ /\[.*\]/)
            {
                next;
            }

            $self->parse_line($line,
                    \$found_status,
                    \$found_project_name,
                    \$found_project_version,
                    \$found_project_name_new,
                    \$found_project_version_new);

            if ($found_project_name eq $proj->{name})
            {
                $found = 1;
                last;
            }
        }

        if (!$found)
        {
            push(@projects_not_found, $proj);
        }
    }

    # Update last_product_version_block_ref with projects to freeze
    foreach my $line (@{$self->{last_product_version_block_ref}})
    {
        if ($line =~ /\[.*\]/)
        {
            next;
        }

        $self->parse_line($line,
                \$found_status,
                \$found_project_name,
                \$found_project_version,
                \$found_project_name_new,
                \$found_project_version_new);

        my $project = 0;
        foreach my $proj (@{$self->{projects_to_freeze_ref}})
        {
            if ($found_project_name eq $proj->{name})
            {
                $project = $proj;
                last;
            }
        }

        if ($project)
        {
            if ($found_project_version ne $project->{target_version})
            {
                if ($found_status eq "M")
                {
                    if ($project->{version} ne $project->{target_version})
                    {
                        $line = "M   $found_project_name_new-$found_project_version_new --> $project->{name}-$project->{target_version}";
                    }
                    else
                    {
                        $line = "    $project->{name}-$project->{target_version}";
                    }
                }
                else
                {
                    if ($found_status eq "X")
                    {
                        $line = "A   $project->{name}-$project->{target_version}";
                    }
                    else
                    {
                        if ($project->{version} ne $project->{target_version})
                        {
                            $line = "M   $found_project_name-$found_project_version --> $project->{name}-$project->{target_version}";
                        }
                        else
                        {
                            $line = "    $project->{name}-$project->{target_version}";
                        }
                    }
                }
            }
            else
            {
                if ($found_status ne "X")
                {
                    $line = "    $project->{name}-$project->{target_version}";
                }
            }
        }
    }

    # Add new ones
    foreach my $project_not_found (@projects_not_found)
    {
        my $new_line = "A   $project_not_found->{name}-$project_not_found->{target_version}";
        push(@{$self->{last_product_version_block_ref}}, $new_line);
    }

    # Create list_ctrl actually
    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("Status");
    $col->SetWidth(60);
    $self->{list_ctrl_projects}->InsertColumn(0, $col);

    $col = Wx::ListItem->new();
    $col->SetId(1);
    $col->SetText("Project");
    $col->SetWidth(200);
    $self->{list_ctrl_projects}->InsertColumn(1, $col);

    foreach my $line (sort @{$self->{last_product_version_block_ref}})
    {
        if ($line =~ /\[.*\]/)
        {
            next;
        }

        my ($status, $text) = $line =~ /^(.{1})\s*(.*)/;

        my $i = $self->{list_ctrl_projects}->GetItemCount();

        my $item = Wx::ListItem->new();
        $item->SetId($i);
        $item->SetText($status);
        $self->{list_ctrl_projects}->InsertItem($item);
        $self->{list_ctrl_projects}->SetItem($i, 1, $text);

        if ($status eq "X")
        {
            $self->{list_ctrl_projects}->SetItemBackgroundColour($i, Wx::Colour->new(192, 192, 192));
        }
    }
}

sub parse_line
{
    my ($self,
        $line,
        $found_status,
        $found_project_name,
        $found_project_version,
        $found_project_name_new,
        $found_project_version_new) = @_;

    if ($line =~ /-->/)
    {
        ($$found_status,
            $$found_project_name,
            $$found_project_version,
            $$found_project_name_new,
            $$found_project_version_new) = $line =~ /^(.{1})\s*(.*)-(\d+.\d+.\d+)\s*--> \s*(.*)-(\d+.\d+.\d+)/;
    }
    else
    {
        ($$found_status, $$found_project_name, $$found_project_version) = $line =~ /^(.{1})\s*(.*)-(\d+.\d+.\d+)/;
        $$found_project_name_new = "";
        $$found_project_version_new = "";
    }
}

###eeeeeeeeeeeeevent handlers
sub on_button_ok
{
    my ($self, $event) = @_;

    # Now, the check of the version is done upstream
    #~ if ($self->{text_ctrl_product_version}->GetValue() eq $self->{text_ctrl_product_new_version}->GetValue())
    #~ {
        #~ if ($self->{text_ctrl_product_flavour}->GetValue() eq $self->{text_ctrl_product_new_flavour}->GetValue())
        #~ {
            #~ Wx::MessageBox("'Product version' and 'New product version' must be different", "", Wx::wxOK | Wx::wxICON_ERROR);
            #~ return;
        #~ }
    #~ }

    #~ my @lines;
    #~ if (DPOUtils::get_file_lines($self->{versions_log}, \@lines))
    #~ {
        #~ foreach my $line (@lines)
        #~ {
            #~ if ($line =~ /\[(.*)\]/)
            #~ {
                #~ if ($1 eq $self->{text_ctrl_product_new_version}->GetValue())
                #~ {
                    #~ if ($self->{text_ctrl_product_flavour}->GetValue() eq $self->{text_ctrl_product_new_flavour}->GetValue())
                    #~ {
                        #~ Wx::MessageBox("Version $1 already exist", "", Wx::wxOK | Wx::wxICON_ERROR);
                        #~ return 0;
                    #~ }
                #~ }
            #~ }
        #~ }
    #~ }
    #~ else
    #~ {
        #~ # doesn't exist yet
    #~ }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductFreezeChoiceDlg::on_button_ok <event_handler>
    warn "Event handler (on_button_ok) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductFreezeChoiceDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_list_ctrl_item_right_click
{
    my ($self, $event) = @_;

    my $menuPopUp = Wx::Menu->new();
    $menuPopUp->Append(0, "Stash");
    $menuPopUp->Append(1, "Unstash");

    $self->{list_ctrl_projects}->PopupMenu($menuPopUp, $event->GetPoint());

    return;

    # wxGlade: DPOProductFreezeChoiceDlg::on_list_ctrl_item_right_click <event_handler>
    warn "Event handler (on_list_ctrl_item_right_click) not implemented";
    $event->Skip;
    # end wxGlade
}

sub on_stash
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_projects}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $item_text = $self->{list_ctrl_projects}->GetItem($i, 1)->GetText();
        $self->{list_ctrl_projects}->SetItemText($i, "X");
        $self->{list_ctrl_projects}->SetItemBackgroundColour($i, Wx::Colour->new(192, 192, 192));

        foreach my $line (@{$self->{last_product_version_block_ref}})
        {
            if ($line =~ /\[.*\]/)
            {
                next;
            }

            if ($line =~ /^(.{1})\s*(.*)/)
            {
                if ($2 eq $item_text)
                {
                    $line =~ s/$1/X/; # considered as not being part of the product from now on
                }
            }
        }
    }

}


sub on_unstash
{
    my ($self, $event) = @_;

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_projects}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        my $item_text = $self->{list_ctrl_projects}->GetItem($i, 1)->GetText();
        $self->{list_ctrl_projects}->SetItemText($i, "");
        $self->{list_ctrl_projects}->SetItemBackgroundColour($i, Wx::Colour->new(255, 255, 255));

        foreach my $line (@{$self->{last_product_version_block_ref}})
        {
            if ($line =~ /\[.*\]/)
            {
                next;
            }

            if ($line =~ /^(.{1})\s*(.*)/)
            {
                if ($2 eq $item_text)
                {
                    $line =~ s/$1/ /;
                }
            }
        }
    }

}


# end of class DPOProductFreezeChoiceDlg

1;

