# generated by wxGlade 0.6.8 on Tue Aug 11 11:55:04 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPOProductNonProductMPBChoiceDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $lib_id, $mpbs_ref, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPOProductNonProductMPBChoiceDlg::new
    $style = wxDEFAULT_DIALOG_STYLE 
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{label_info} = Wx::StaticText->new($self, wxID_ANY, _T("Since ACE can be used with more than\none MPB, you must select which one."), wxDefaultPosition, wxDefaultSize, );
    $self->{list_ctrl_mpbs} = Wx::ListCtrl->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxSUNKEN_BORDER);
    $self->{button_select_mpb} = Wx::Button->new($self, wxID_ANY, _T("Select MPB"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button_select_mpb}->GetId, \&on_button_select_mpb);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    $self->{mpbs_ref} = $mpbs_ref;

    $self->fill_list_ctrl_mpbs();

    $self->{label_info}->SetLabel("Since $lib_id can be used with more than\none MPB, you must select which one.");

    return $self;
}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPOProductNonProductMPBChoiceDlg::__set_properties
    $self->SetTitle(_T("Choose an MPB"));
    $self->{list_ctrl_mpbs}->SetMinSize(Wx::Size->new(260, 350));
    # end wxGlade

    $self->{list_ctrl_mpbs}->SetMinSize(Wx::Size->new(260, 350));
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPOProductNonProductMPBChoiceDlg::__do_layout
    $self->{sizer_7} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_34} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_7}->Add($self->{label_info}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->{sizer_7}->Add($self->{list_ctrl_mpbs}, 1, wxEXPAND, 0);
    $self->{sizer_34}->Add($self->{button_select_mpb}, 0, wxALL, 5);
    $self->{sizer_34}->Add($self->{button_cancel}, 0, wxALL, 5);
    $self->{sizer_7}->Add($self->{sizer_34}, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    $self->SetSizer($self->{sizer_7});
    $self->{sizer_7}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub fill_list_ctrl_mpbs
{
    my ($self) = @_;

    my $list_ctrl = $self->{list_ctrl_mpbs};
    $list_ctrl->ClearAll();

    my $col = Wx::ListItem->new();
    $col->SetId(0);
    $col->SetText("MPB");
    $col->SetWidth(150);
    $list_ctrl->InsertColumn(0, $col);

    foreach my $x (@{$self->{mpbs_ref}})
    {
        my $item = Wx::ListItem->new();
        $item->SetId($list_ctrl->GetItemCount());
        $item->SetText($x);
        $list_ctrl->InsertItem($item);
    }
}

###EEEEEEEEEEEEEEEEEEEEEvents
sub on_button_select_mpb
{
    my ($self, $event) = @_;

    if ($self->{list_ctrl_mpbs}->GetSelectedItemCount() == 0)
    {
        Wx::MessageBox("You must select an MPB", "", Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    my $i = -1;
    for ( ;; )
    {
        $i = $self->{list_ctrl_mpbs}->GetNextItem($i,
                                    Wx::wxLIST_NEXT_ALL,
                                    Wx::wxLIST_STATE_SELECTED);
        if ( $i == -1 )
        {
            last;
        }

        $self->{selected_mpb} = $self->{list_ctrl_mpbs}->GetItemText($i);
        last;
    }

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPOProductNonProductMPBChoiceDlg::on_button_select_mpb <event_handler>
    warn "Event handler (on_button_select_mpb) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPOProductNonProductMPBChoiceDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class DPOProductNonProductMPBChoiceDlg

1;

