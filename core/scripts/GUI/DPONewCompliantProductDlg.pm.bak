use lib $ENV{DPO2_CORE_ROOT} . "/scripts";

use DPOUtils;
use DPOEnvVars;

# generated by wxGlade 0.6.8 on Wed Sep 02 05:25:27 2015
#
# To get wxPerl visit http://wxPerl.sourceforge.net/
#

use Wx 0.15 qw[:allclasses];
use strict;
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package DPONewCompliantProductDlg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;
use Wx::Locale 'gettext' => '_T', 'gettext_noop' => 'gettext_noop';


sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: DPONewCompliantProductDlg::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->{text_ctrl_product_name} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sizer_97_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Product name") );
    $self->{text_ctrl_parent_directory} = Wx::TextCtrl->new($self, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, );
    $self->{button_browse} = Wx::Button->new($self, wxID_ANY, _T("..."));
    $self->{checkbox_tests} = Wx::CheckBox->new($self, wxID_ANY, _T("tests"), wxDefaultPosition, wxDefaultSize, );
    $self->{sizer_146_staticbox} = Wx::StaticBox->new($self, wxID_ANY, _T("Parent directory") );
    $self->{button_create} = Wx::Button->new($self, wxID_ANY, _T("Create"));
    $self->{button_cancel} = Wx::Button->new($self, wxID_ANY, _T("Cancel"));

    $self->__set_properties();
    $self->__do_layout();

    Wx::Event::EVT_BUTTON($self, $self->{button_browse}->GetId, \&on_button_browse);
    Wx::Event::EVT_CHECKBOX($self, $self->{checkbox_tests}->GetId, \&on_checkbox_tests);
    Wx::Event::EVT_BUTTON($self, $self->{button_create}->GetId, \&on_button_create);
    Wx::Event::EVT_BUTTON($self, $self->{button_cancel}->GetId, \&on_button_cancel);

    # end wxGlade

    my $init =  "\$(DPO2_CORE_ROOT)";
    if (!DPOEnvVars::expand_env_var(\$init))
    {
        DPOLog::report_msg(DPOEvents::ENV_VAR_NOT_DEFINED, [$init]);
        return;
    }

    $self->{tests_directory} = "$init/scripts/tests";
    $self->{previous_parent_directory} = "";

    $self->{text_ctrl_product_name}->SetFocus();

    return $self;

}


sub __set_properties {
    my $self = shift;
    # begin wxGlade: DPONewCompliantProductDlg::__set_properties
    $self->SetTitle(_T("New DPO compliant product"));
    $self->{text_ctrl_parent_directory}->SetMinSize(Wx::Size->new(360, 21));
    $self->{button_browse}->SetMinSize(Wx::Size->new(20, -1));
    # end wxGlade
}

sub __do_layout {
    my $self = shift;
    # begin wxGlade: DPONewCompliantProductDlg::__do_layout
    $self->{sizer_96} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_99} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_146_staticbox}->Lower();
    $self->{sizer_146} = Wx::StaticBoxSizer->new($self->{sizer_146_staticbox}, wxVERTICAL);
    $self->{sizer_98} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_97_staticbox}->Lower();
    $self->{sizer_97} = Wx::StaticBoxSizer->new($self->{sizer_97_staticbox}, wxHORIZONTAL);
    $self->{sizer_97}->Add($self->{text_ctrl_product_name}, 1, 0, 0);
    $self->{sizer_96}->Add($self->{sizer_97}, 0, wxEXPAND, 0);
    $self->{sizer_98}->Add($self->{text_ctrl_parent_directory}, 1, 0, 0);
    $self->{sizer_98}->Add($self->{button_browse}, 0, wxLEFT, 3);
    $self->{sizer_146}->Add($self->{sizer_98}, 0, wxEXPAND, 0);
    $self->{sizer_146}->Add($self->{checkbox_tests}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->{sizer_96}->Add($self->{sizer_146}, 0, wxEXPAND, 0);
    $self->{sizer_99}->Add($self->{button_create}, 0, wxALL, 5);
    $self->{sizer_99}->Add($self->{button_cancel}, 0, wxALL, 5);
    $self->{sizer_96}->Add($self->{sizer_99}, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    $self->SetSizer($self->{sizer_96});
    $self->{sizer_96}->Fit($self);
    $self->Layout();
    # end wxGlade
}

sub on_button_browse
{
    my ($self, $event) = @_;

    my $dlg = Wx::DirDialog->new($self, "Select the parent directory of the new product");
    my $rc = $dlg->ShowModal();
    if ($rc == Wx::wxID_OK)
    {
        my $path = $dlg->GetPath();
        $path =~ s/\\/\//g;
        $self->{text_ctrl_parent_directory}->SetValue($path);
        $self->{previous_parent_directory} = $path;
    }

    return;

    # wxGlade: DPONewCompliantProductDlg::on_button_browse <event_handler>
    warn "Event handler (on_button_browse) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_create
{
    my ($self, $event) = @_;

    my $parent_dir = $self->{text_ctrl_parent_directory}->GetValue();

    if (!DPOUtils::valid_input($parent_dir))
    {
        Wx::MessageBox(
                "Invalid character in $parent_dir",
                "",
                Wx::wxOK | Wx::wxICON_ERROR);
        return 0;
    }

    my $product_name = $self->{text_ctrl_product_name}->GetValue();

    if (!DPOUtils::valid_input($product_name))
    {
        Wx::MessageBox(
                "Invalid character in $product_name",
                "",
                Wx::wxOK | Wx::wxICON_ERROR);
        return 0;
    }

    my $product_env_var_id =  "\$(" . uc($product_name) . "_ROOT)";
    my $product_env_var_value = $product_env_var_id;
    if (DPOEnvVars::expand_env_var(\$product_env_var_value))
    {
        Wx::MessageBox("$product_name already exists");
        return;
    }

    my @missings;
    if ($product_name eq "")
    {
        push(@missings, "New product name");
    }

    if ($parent_dir eq "")
    {
        push(@missings, "Parent directory");
    }

    if (scalar(@missings) != 0)
    {
        my $msg = "";
        foreach my $x (@missings)
        {
            $msg .= "- $x\n";
        }
        Wx::MessageBox("Missing fields:\n\n$msg", "", Wx::wxOK | Wx::wxICON_ERROR);

        return;
    }

    my $target = "$parent_dir/$product_name";

    # Create paths
    if (-d $target)
    {
        Wx::MessageBox("$target already exists.", "", Wx::wxOK | Wx::wxICON_ERROR);
        return;
    }

    DPOUtils::make_path($target);
    DPOUtils::make_path("$target/projects");
    DPOUtils::make_path("$target/workspaces");
    DPOUtils::make_path("$target/templates4dpo");

    my @failed_dirs;
    unless (-d $target)
    {
        push(@failed_dirs, $target);
    }
    unless (-d "$target/projects")
    {
        push(@failed_dirs, "$target/projects");
    }
    unless (-d "$target/workspaces")
    {
        push(@failed_dirs, "$target/workspaces");
    }
    if (scalar(@failed_dirs) != 0)
    {
        my $msg = "";
        foreach my $x (@failed_dirs)
        {
            $msg .= "- $x\n";
        }
        Wx::MessageBox("Failed to create:\n\n$msg", "", Wx::wxOK | Wx::wxICON_ERROR);

        if (-d $target)
        {
            File::Path::rmtree $target;
        }

        return;
    }

    # Copy mandatory scripts
    my $env_var_id = "\$(DPO2_CORE_ROOT)";
    my $path = $env_var_id;
    $path =~ s/\\/\//g;
    if (DPOEnvVars::expand_env_var(\$path))
    {
        my $dpo_product_xml = "$path/scripts/DPOProduct.xml";
        if (!File::Copy::syscopy($dpo_product_xml, "$target/DPOProduct.xml"))
        {
            Wx::MessageBox("Failed to copy $dpo_product_xml to $target.", "", Wx::wxOK | Wx::wxICON_ERROR);
            File::Path::rmtree $target;
            return;
        }

        my $config_product = DPOProductConfig->new("$target/DPOProduct.xml");
        if ($config_product)
        {
            my $product;
            $config_product->get_product(\$product);

            $product->{name} = $product_name;
            if (!$config_product->save($product))
            {
                Wx::MessageBox("Failed to update DPOProduct.xml", "", Wx::wxOK | Wx::wxICON_ERROR);
                File::Path::rmtree $target;
                return;
            }
        }
        else
        {
            Wx::MessageBox("Can't load product from $target/DPOProduct.xml", "", Wx::wxOK | Wx::wxICON_ERROR);
            File::Path::rmtree $target;
            return;
        }
    }
    else
    {
        Wx::MessageBox("$env_var_id is not defined as environment variable.", "", Wx::wxOK | Wx::wxICON_ERROR);
        File::Path::rmtree $target;
        return;
    }

    # set new product env. var.
    my @listEnvVarValues;
    my $product_env_var = DPOEnvVar->new(uc($product_name) . "_ROOT", $target);
    push(@listEnvVarValues, $product_env_var);

    my $rc = DPOEnvVars::system_set_env_vars(\@listEnvVarValues);
    if (!$rc)
    {
        Wx::MessageBox("Failed to set $product_name environment variable.", "", Wx::wxOK | Wx::wxICON_ERROR);
        File::Path::rmtree $target;
        return;
    }

    Wx::MessageBox("$product_name created.");

    $self->EndModal(Wx::wxID_OK);

    return;

    # wxGlade: DPONewCompliantProductDlg::on_button_create <event_handler>
    warn "Event handler (on_button_create) not implemented";
    $event->Skip;
    # end wxGlade
}


sub on_button_cancel
{
    my ($self, $event) = @_;

    $self->EndModal(Wx::wxID_CANCEL);

    return;

    # wxGlade: DPONewCompliantProductDlg::on_button_cancel <event_handler>
    warn "Event handler (on_button_cancel) not implemented";
    $event->Skip;
    # end wxGlade
}



sub on_checkbox_tests
{
    my ($self, $event) = @_;

    if ($self->{checkbox_tests}->IsChecked())
    {
        $self->{previous_parent_directory} = $self->{text_ctrl_parent_directory}->GetValue();
        $self->{text_ctrl_parent_directory}->SetValue($self->{tests_directory});
    }
    else
    {
        $self->{text_ctrl_parent_directory}->SetValue($self->{previous_parent_directory});
    }

    return;

    # wxGlade: DPONewCompliantProductDlg::on_checkbox_tests <event_handler>
    warn "Event handler (on_checkbox_tests) not implemented";
    $event->Skip;
    # end wxGlade
}

# end of class DPONewCompliantProductDlg

1;

